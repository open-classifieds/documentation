[


{
"title": "Links",
"tags": "formattingnavigation",
"keywords": "links, hyperlinks, cross references, related links, relationship tables",
"url": "doc_hyperlinks.html",
"summary": "When creating links, although you can use standard HTML or Markdown, this approach is usually susceptible to a lot of errors and broken links. A better approach to handling links is to use references to a YML file.",
"body": "this is a test edit....Link strategiesOne of the more difficult parts of a documentation site is keeping all the internal links accurate and valid. When you&#39;re single sourcing, you usually have multiple documentation outputs that include certain pages for certain audiences. Orphan links are a common problem to avoid. Although there are many ways to create links, I&#39;ll just describe what I&#39;ve found to work well.Create an external linkWhen linking to an external site, use Markdown formatting:[Google](http://google.com)If you need to use HTML, use the normal syntax:&lt;a href=&quot;http://google.com&quot;&gt;Google&lt;/a&gt;Linking to internal pagesWhen linking to internal pages, you could use this same syntax:[Sample](sample.html)OR&lt;a href=&quot;sample.html&quot;&gt;Sample&lt;/a&gt;However, what happens when you change the page&#39;s title or link? Jekyll doesn&#39;t automatically pull in the page&#39;s title when you create links.In my experience, coding links like this results in a lot of broken links.Managed linksFor internal links, I&#39;ve found that it&#39;s a best practice to store the link in a YAML file that is derived from the table of contents. The theme has a file called urls.txt. This file contains the same code as the table of contents (but without the conditional qualifiers). It iterates through every page listed in the table of contents sidebar (as well as the top navigation menus) and creates an output that looks like this for each link: doc_getting_started:  title: &quot;Getting started with this theme&quot;  url: &quot;doc_getting_started.html&quot;  link: &quot;&lt;a href=&#39;doc_getting_started.html&#39;&gt;Getting started with this theme&lt;/a&gt;&quot;From the site output folder, open urls.txt and observe that it is properly populated (blank spaces between entries doesn&#39;t matter). Then manually copy the contents from the urls.txt and insert it into the urls.yml in your project folder. Because the urls.txt is produced from the table of contents, you ensure that the same titles and URLs used in your table of contents and top navigation will also be used in your inline links. To create a link in a topic, just reference the appropriate value in the urls.yml file, like this:{{site.data.urls.doc_getting_started.link}}This will insert the following into your topic:&lt;a href=&#39;doc_getting_started.html&#39;&gt;Getting started with this theme&lt;/a&gt;You don&#39;t need to worry whether you can use Markdown syntax when inserting a link this way, because the insertion is HTML. To insert a link in the context of a phrase, you can use this syntax:After downloading the theme, you can [get started in building the theme]({{site.data.urls.doc_getting_started.url}}).This leverages Markdown syntax. If you&#39;re in an HTML file or section, use this:&lt;p&gt;After downloading the theme, you can &lt;a href=&quot;{{site.data.urls.doc_getting_started.url}}&quot;&gt;get started in building the theme&lt;/a&gt;.&lt;/p&gt;Note that the url value accesses the URL for the page only, whereas link gets the title and url in a link format.You shouldn&#39;t have to copy the contents from the urls.txt file into your YAML data source too often &mdash; only when you&#39;re creating new pages. By using this approach, you&#39;re less likely to end up with broken links.Always make sure your TOC page is accurateYou should treat your sidebar_doc.yml file with a lot of care. Every time you add a page to your site, make sure it&#39;s listed in your sidebar_doc.yml file (or in your top navigation). If you don&#39;t have pages listed in your sidebar_doc.yml file, they won&#39;t be included in the urls.txt file, and as your site grows, it will be harder to recognize pages that are absent from the TOC.Because all the pages are stored in the root directory, the list of files can grow really long. I typically find pages by navigating to the page in the preview server, copying the page name (e.g., doc_hyperlinks), and then pressing Shift + Shift in WebStorm to locate the page. This is the only sane way to locate your pages when you have hundreds of pages in your root directory. If the page isn&#39;t listed in your TOC, it will be difficult to navigate to it and find it.Checking for broken linksAnother way to ensure you don&#39;t have any broken links in your output is to generate a PDF. When you generate a PDF, look for the following two problems in the output:page 0see .Both instances indicate a broken link. The &quot;page 0&quot; indicates that Prince XML couldn&#39;t find the page that the link points to, and so it can&#39;t create a cross reference. This may be because the page doesn&#39;t exist, or because the anchor is pointing to a missing location.If you see &quot;see .&quot; it means that the reference (for example, {{mylink...}} doesn&#39;t actually refer to anything. As a result, it&#39;s simply blank in the output. To keep Prince XML from trying to insert a cross reference into a link, add class=&quot;noCrossRef&quot; to the link. Relative link pathsThe site is coded with relative links. There aren&#39;t any permalinks, urls, or baseurls. The folder structure you see in the project directory is the same folder directory that gets built in the site output.Author all pages in your root directory. This greatly simplifies linking. However, when you&#39;re linking to images, files, or other content, you can put these assets into subfolders. For example, to link to a file stored in files/doc/whitepaper.pdf, you would use &quot;files/doc/whitepaper.pdf&quot; as the link. Why not put pages too into subfolders? If you put a page into a subfolder, then links to the stylesheets, JavaScript, and other sources will fail. On those sub-folder pages, you&#39;d need to use ../ to move up a level in the directory to access the stylesheets, JavaScript, etc. But if you have some pages in folders on one level, others in sub-sub-folders, and others in the root, trying to guess which files should contain ../ or ../../ or nothing at all and which shouldn&#39;t will be a nightmare.Jekyll gets around some of this link path variation by using baseurl and including code that prepends the baseurl before a link. This converts the links into absolute rather than relative links.With absolute links, the site only displays at the baseurl you configured. This is problematic for tech docs because you usually need to move files around from one folder to another based on versions you&#39;re archiving or when you&#39;re moving your documentation from draft to testing to production folders.Limitations with linksOne of the shortcomings in this theme is that the link titles in the sidebar and inline links don&#39;t necessarily have to match the titles specified on each page. You have to manually keep the page titles in sync with the titles listed in the sidebar and top navigation. Although I could potentially get rid of the titles key in the article topic, it would make it more difficult to know what page you&#39;re editing."
},




{
"title": "Tags",
"tags": "navigation",
"keywords": "tags, navigation, buttons, links, association",
"url": "doc_tags.html",
"summary": "Tags provide another means of navigation for your content. Unlike the table of contents, tags can show the content in a variety of arrangements and groupings. Implementing tags in this Jekyll theme is somewhat of a manual process.",
"body": "Add a tag to a pageYou can add tags to pages by adding tags in the frontmatter with values inside brackets, like this:---title: 2.0 Release Notespermalink: /release_notes_2_0/tags: [formatting, single-sourcing]---Tags overviewWith posts, tags have a namespace that you can access with posts.tags.tagname, where tagname is the name of the tag. You can then list all posts in that tag namespace. But pages don&#39;t off this same tag namespace, so you could actually use another key instead of tags. Nevertheless, I&#39;m using the same tags name here.To prevent tags from getting out of control and inconsistent, first make sure the tag appears in the \\date/tags_doc.yml file. If it&#39;s not there, the tag you add to a page won&#39;t be read. I added this check just to make sure I&#39;m using the same tags consistently and not adding new tags that don&#39;t have tag archive pages.Unlike with WordPress, you have to build out the functionality for tags so that clicking a tag name shows you all pages with that tag. Tags in Jekyll are much more manual.Additionally, you must create a tag archive page similar to the other pages named tag-{tagname}.html folder. This theme doesn&#39;t auto-create tag archive pages.For simplicity, make all your tags single words (connect them with hyphens if necessary).Setting up tagsTags have a few components.First make sure you configure a few details in the conditions.html file. In particular, see this setting:{% assign projectTags = site.data.tags_doc.allowed-tags %}The tags_doc name must correspond with how you label your tags file. Here, &quot;doc&quot; should be your project name.In the _data file, add a yml file similar to tags_doc.yml. The YML file lists the tags that are allowed:allowed-tags:  - getting-started  - overview  - formatting  - publishing  - single-sourcing  - special-layouts  - content typesCreate a tag archive file for each tag in your tags_doc.yml list. Name the file like this: tag-getting-started.html, where doc is your project name. (Again, tags with multiple words need hyphens in them.)Each tag archive file needs only this:---title: &quot;Getting Started Pages&quot;tagName: getting-started---{% include taglogic.html %}In the \\_includes folder, there&#39;s a taglogic.html file. This file (included in each tag archive file) has common logic for getting the tags and listing out the pages containing the tag in a table with summaries or truncated excerpts. You don&#39;t have to do anything with the file &amp;mdash; just leave it there because the tag archive pages reference it.Adjust button color or tag placement as desired. By default, the _layouts/page.html file will look for any tags on a page and insert them at the bottom of the page using this code:&lt;div class=&quot;tags&quot;&gt;    {% if page.tags != null %}    &lt;b&gt;Tags: &lt;/b&gt;    {% include custom/conditions.html %}    {% for tag in page.tags %}    {% if projectTags contains tag %}       &lt;a href=&quot;tag-{{tag}}.html&quot; class=&quot;btn btn-info navbar-btn cursorNorm&quot; role=&quot;button&quot;&gt;{{page.tagName}}{{tag}}&lt;/a&gt;    {% endif %}    {% endfor %}    {% endif %}&lt;/div&gt;Here&#39;s an example of what the code does:Tags: Because this code appears on the _layouts/page.html file by default, you don&#39;t need to do anything. However, if you want to alter the placement or change the button color, you can do so.You can change the button color by changing the class on the button from btn-info to one of the other button classes bootstrap provides. See  for more options on button class names.Retrieving pages for a specific tagIf you want to retrieve pages outside of a particular tag-archive page, you could use this code:Getting started pages: &lt;ul&gt;{% for page in site.pages %}{% for tag in page.tags %}{% if tag == &quot;getting-started&quot; %}&lt;li&gt;&lt;a href=&quot;{{page.url | replace: &#39;/&#39;,&#39;&#39;}}&quot;&gt;{{page.title}}&lt;/a&gt;&lt;/li&gt;{% endif %}{% endfor %}{% endfor %} &lt;/ul&gt;Here&#39;s how that code renders: Getting started pages:Getting started with this themeTroubleshootingSupportCustomizing the themeAbout this themeWebStorm Text EditorSupported featuresIntroductionPagesIf you want to sort the pages alphabetically, you have to apply a sort filter:Getting started pages:&lt;ul&gt;{% assign sorted_pages = (site.pages | sort: &#39;title&#39;) %}{% for page in sorted_pages %}{% for tag in page.tags %}{% if tag == &quot;getting-started&quot; %}&lt;li&gt;&lt;a href=&quot;{{page.url | replace: &#39;/&#39;,&#39;&#39;}}&quot;&gt;{{page.title}}&lt;/a&gt;&lt;/li&gt;{% endif %}{% endfor %}{% endfor %} &lt;/ul&gt;Here&#39;s how that code renders:Getting started pages:EfficiencyAlthough the tag approach here uses for loops, these are somewhat inefficient on a large site. Most of my tech doc projects don&#39;t have hundreds of pages (like my blog does). If your project does have hundreds of pages, this for loop approach with tags is going to slow down your build times. Without the ability to access pages inside a universal namespace with the page type, there aren&#39;t many workarounds here for faster looping. With posts (instead of pages), since you can access just the posts inside posts.tag.tagname, you can be a lot more efficient with the looping. Still, if the build times are getting long (e.g., 1 or 2 minutes per build), look into reducing the number of for loops on your site.Empty tags?If your page shows &quot;tags:&quot; at the bottom without any value, it could mean a couple of things:You&#39;re using a tag that isn&#39;t specified in your allowed tags list in your tags.yml file.You have an empty tags: [] property in your frontmatter.If you don&#39;t want tags to appear at all on your page, remove the tags property from your frontmatter.Remembering the right tagsSince you may have many tags and find it difficult to remember what tags are allowed, I recommend creating a template that prepopulates all your frontmatter with all possible tags. Then just remove the tags that don&#39;t apply. See  for tips on creating file templates in WebStorm."
},




{
"title": "Knowledge-base layout",
"tags": "special-layouts",
"keywords": "knowledge base, support portal, grid, doc portal",
"url": "doc_kb_layout.html",
"summary": "This shows a sample layout for a knowledge base. Each square could link to a tag archive page. In this example, font icons from Font Awesome are enlarged to a large size. You can also add captions below each icon.",
"body": "          Getting Started          Navigation          Single-sourcing&nbsp;          Publishing          Special layouts          Formatting        Generating a list of all pages with a certain tagIf you don&#39;t want to link to a tag archive index, but instead want to list all pages that have a certain tag, you could use this code:Getting started pages:&lt;ul&gt;{% assign sorted_pages = (site.pages | sort: &#39;title&#39;) %}{% for page in sorted_pages %}{% for tag in page.tags %}{% if tag == &quot;getting-started&quot; %}&lt;li&gt;&lt;a href=&quot;{{page.url | replace: &#39;/&#39;,&#39;&#39;}}&quot;&gt;{{page.title}}&lt;/a&gt;&lt;/li&gt;{% endif %}{% endfor %}{% endfor %} &lt;/ul&gt;Getting started pages: "
},




{
"title": "Collections",
"tags": "content-types",
"keywords": "groups, api, structure",
"url": "doc_collections.html",
"summary": "Collections are useful if you want to loop through a special folder of pages that you make available in a content API. You could also use collections if you have a set of articles that you want to treat differently from the other content, with a different layout or format.",
"body": "What are collectionsCollections are custom content types different from pages and posts. You might create a collection if you want to treat a specific set of articles in a unique way, such as with a custom layout or listing. For more detail on collections, see Ben Balter&#39;s explanation of collections here.Create a collectionTo create a collection, add the following in your configuration file:collections:  tooltips:    output: trueIn this example, &quot;tooltips&quot;&quot; is the name of the collection.Interacting with collectionsYou can interact with collections by using the site.collectionname namespace, where collectionname is what you&#39;ve configured. In this case, if I wanted to loop through all tooltips, I would use site.tooltips instead of site.pages or site.posts.See Collections in the Jekyll documentation for more information.How to use collectionsI haven&#39;t found a huge use for collections in normal documentation. However, I did find a use for collections in generating a tooltip file that would be used for delivering tooltips to a user interface from text files in the documentation. See  for details."
},




{
"title": "FAQ layout",
"tags": "special-layouts",
"keywords": "frequently asked questions, FAQ, question and answer, collapsible sections, expand, collapse",
"url": "doc_faq.html",
"summary": "You can use an accordion-layout that takes advantage of Bootstrap styling. This is useful for an FAQ page.",
"body": "If you want to use an FAQ format, use the syntax shown on the faq.html page. Rather than including code samples here (which are bulky with a lot of nested div tags), just look at the source in the doc_faq.html theme file.                                                                                                                         Lorem ipsum dolor sit amet, consectetur adipiscing elit?                                                                                                                                        Anim pariatur cliche reprehenderit, enim eiusmod high life accusamus terry richardson ad squid. 3 wolf moon officia aute, non cupidatat skateboard dolor brunch. Food truck quinoa nesciunt laborum eiusmod. Brunch 3 wolf moon tempor, sunt aliqua put a bird on it squid single-origin coffee nulla assumenda shoreditch et. Nihil anim keffiyeh helvetica, craft beer labore wes anderson cred nesciunt sapiente ea proident. Ad vegan excepteur butcher vice lomo. Leggings occaecat craft beer farm-to-table, raw denim aesthetic synth nesciunt you probably haven't heard of them accusamus labore sustainable VHS.                                                                                                                                                                                                    Curabitur eget leo at velit imperdiet varius. In eu ipsum vitae velit congue iaculis vitae at risus?                                                                                                                                        Anim pariatur cliche reprehenderit, enim eiusmod high life accusamus terry richardson ad squid. 3 wolf moon officia aute, non cupidatat skateboard dolor brunch. Food truck quinoa nesciunt laborum eiusmod. Brunch 3 wolf moon tempor, sunt aliqua put a bird on it squid single-origin coffee nulla assumenda shoreditch et. Nihil anim keffiyeh helvetica, craft beer labore wes anderson cred nesciunt sapiente ea proident. Ad vegan excepteur butcher vice lomo. Leggings occaecat craft beer farm-to-table, raw denim aesthetic synth nesciunt you probably haven't heard of them accusamus labore sustainable VHS.                                                                                                                                                                                                    Aenean consequat lorem ut felis ullamcorper?                                                                                                                                        Anim pariatur cliche reprehenderit, enim eiusmod high life accusamus terry richardson ad squid. 3 wolf moon officia aute, non cupidatat skateboard dolor brunch. Food truck quinoa nesciunt laborum eiusmod. Brunch 3 wolf moon tempor, sunt aliqua put a bird on it squid single-origin coffee nulla assumenda shoreditch et. Nihil anim keffiyeh helvetica, craft beer labore wes anderson cred nesciunt sapiente ea proident. Ad vegan excepteur butcher vice lomo. Leggings occaecat craft beer farm-to-table, raw denim aesthetic synth nesciunt you probably haven't heard of them accusamus labore sustainable VHS.                                                                                                                                                                                                    Lorem ipsum dolor sit amet, consectetur adipiscing elit?                                                                                                                                        Anim pariatur cliche reprehenderit, enim eiusmod high life accusamus terry richardson ad squid. 3 wolf moon officia aute, non cupidatat skateboard dolor brunch. Food truck quinoa nesciunt laborum eiusmod. Brunch 3 wolf moon tempor, sunt aliqua put a bird on it squid single-origin coffee nulla assumenda shoreditch et. Nihil anim keffiyeh helvetica, craft beer labore wes anderson cred nesciunt sapiente ea proident. Ad vegan excepteur butcher vice lomo. Leggings occaecat craft beer farm-to-table, raw denim aesthetic synth nesciunt you probably haven't heard of them accusamus labore sustainable VHS.                                                                                                                                                                                                    Curabitur eget leo at velit imperdiet varius. In eu ipsum vitae velit congue iaculis vitae at risus?                                                                                                                                        Anim pariatur cliche reprehenderit, enim eiusmod high life accusamus terry richardson ad squid. 3 wolf moon officia aute, non cupidatat skateboard dolor brunch. Food truck quinoa nesciunt laborum eiusmod. Brunch 3 wolf moon tempor, sunt aliqua put a bird on it squid single-origin coffee nulla assumenda shoreditch et. Nihil anim keffiyeh helvetica, craft beer labore wes anderson cred nesciunt sapiente ea proident. Ad vegan excepteur butcher vice lomo. Leggings occaecat craft beer farm-to-table, raw denim aesthetic synth nesciunt you probably haven't heard of them accusamus labore sustainable VHS.                                                                                                                                                                                                    Aenean consequat lorem ut felis ullamcorper?                                                                                                                                        Anim pariatur cliche reprehenderit, enim eiusmod high life accusamus terry richardson ad squid. 3 wolf moon officia aute, non cupidatat skateboard dolor brunch. Food truck quinoa nesciunt laborum eiusmod. Brunch 3 wolf moon tempor, sunt aliqua put a bird on it squid single-origin coffee nulla assumenda shoreditch et. Nihil anim keffiyeh helvetica, craft beer labore wes anderson cred nesciunt sapiente ea proident. Ad vegan excepteur butcher vice lomo. Leggings occaecat craft beer farm-to-table, raw denim aesthetic synth nesciunt you probably haven't heard of them accusamus labore sustainable VHS.                                                                                                                                                                                                    Lorem ipsum dolor sit amet, consectetur adipiscing elit?                                                                                                                                        Anim pariatur cliche reprehenderit, enim eiusmod high life accusamus terry richardson ad squid. 3 wolf moon officia aute, non cupidatat skateboard dolor brunch. Food truck quinoa nesciunt laborum eiusmod. Brunch 3 wolf moon tempor, sunt aliqua put a bird on it squid single-origin coffee nulla assumenda shoreditch et. Nihil anim keffiyeh helvetica, craft beer labore wes anderson cred nesciunt sapiente ea proident. Ad vegan excepteur butcher vice lomo. Leggings occaecat craft beer farm-to-table, raw denim aesthetic synth nesciunt you probably haven't heard of them accusamus labore sustainable VHS.                                                                                                                                                                                                    Curabitur eget leo at velit imperdiet varius. In eu ipsum vitae velit congue iaculis vitae at risus?                                                                                                                                        Anim pariatur cliche reprehenderit, enim eiusmod high life accusamus terry richardson ad squid. 3 wolf moon officia aute, non cupidatat skateboard dolor brunch. Food truck quinoa nesciunt laborum eiusmod. Brunch 3 wolf moon tempor, sunt aliqua put a bird on it squid single-origin coffee nulla assumenda shoreditch et. Nihil anim keffiyeh helvetica, craft beer labore wes anderson cred nesciunt sapiente ea proident. Ad vegan excepteur butcher vice lomo. Leggings occaecat craft beer farm-to-table, raw denim aesthetic synth nesciunt you probably haven't heard of them accusamus labore sustainable VHS.                                                                                                                                                                                                    Aenean consequat lorem ut felis ullamcorper?                                                                                                                                        Anim pariatur cliche reprehenderit, enim eiusmod high life accusamus terry richardson ad squid. 3 wolf moon officia aute, non cupidatat skateboard dolor brunch. Food truck quinoa nesciunt laborum eiusmod. Brunch 3 wolf moon tempor, sunt aliqua put a bird on it squid single-origin coffee nulla assumenda shoreditch et. Nihil anim keffiyeh helvetica, craft beer labore wes anderson cred nesciunt sapiente ea proident. Ad vegan excepteur butcher vice lomo. Leggings occaecat craft beer farm-to-table, raw denim aesthetic synth nesciunt you probably haven't heard of them accusamus labore sustainable VHS.                                                                                                                                  "
},




{
"title": "Syntax highlighting",
"tags": "formatting",
"keywords": "rouge, pygments, prettify, color coding,",
"url": "doc_syntax_highlighting.html",
"summary": "You can apply syntax highlighting to your code. This theme uses pygments and applies color coding based on the lexer you specify.",
"body": "About syntax highlightingFor syntax highlighting, use fenced code blocks optionally followed by the language syntax you want:```ruby    def foo      puts 'foo'    end```This looks as follows:    def foo      puts &#39;foo&#39;    endFenced code blocks require a blank line before and after.If you&#39;re using an HTML file, you can also use the highlight command with Liquid markup:{% highlight ruby %}    def foo      puts 'foo'    end{% endhighlight %}It renders the same:   def foo      puts 'foo'    endThe theme has syntax highlighting specified in the configuration file as follows:highlighter: pygmentsYou can use another highlighter such as rouge.The syntax highlighting is done via the css/syntax.css file.Available Pygments lexersThe keywords you must add to specify the highlighting (in the previous example, ruby) are called &quot;lexers.&quot; You can search for &quot;pygments lexers&quot; or go directly to Available lexers to see what values you can use. Here are some common ones I use:jshtmlyamlcssjsonphpjavacppdotnetxmlhttp"
},




{
"title": "Getting started with this theme",
"tags": "getting-started",
"keywords": "start, introduction, begin, install, build, hello world,",
"url": "doc_getting_started.html",
"summary": "To get started with this theme, first make sure you have all the prerequisites in place; then build the theme following the sample build commands. Because this theme is set up for single sourcing projects, it doesn't follow the same pattern as most Jekyll projects (which have just a _config.yml file in the root directory).",
"body": "Step 1: Set up the prerequisitesBefore you start installing the theme, make sure you have all of these prerequisites in place.Mac computer (recommended). If you have a PC, see the note below. Make sure you can get Jekyll working on Windows before proceeding.Ruby. On a Mac, this should already be installed. Open your Terminal and type which ruby to confirm. Rubygems. This is a package manager for Ruby. Type which gem to confirm.Jekyllrb. To install: gem install jekyll. Type which jekyll to confirm that Jekyll is installed.Text editor (some examples: Sublime Text, Atom, WebStorm, IntelliJ)iTerm - Optional but recommended instead of Terminal. pygments - Pygments handles syntax highlighting. In my experiments, the Pygments highlighter seemed better than the default rouge highlighter. To install Pygments, you will need Python installed. (If you don&#39;t install pygments, you&#39;ll get an error when you build the theme.) To check if Python is installed, type which python. To install Pygments: gem install pygments.rb. If you&#39;re on Windows, you can still install and run this theme. However, you must first set up a few things &mdash; Ruby, Ruby Dev Kit, Python, . Follow the instructions here: Set up Jekyll on Windows. Also see Jekyll on Windows.Step 2: Build the themeBefore you start customizing the theme, make sure you can build the theme with the default content and settings first.Download the theme from the documentation-theme-jekyll Github repository and unzip it into your ~username/projects folder. You can either download the theme files directly by clicking the Download Zip button on the right of the repo, or use git to clone the repository to your local machine. Note, however, that you won&#39;t be using the pull command to update the theme since you&#39;ll be customizing it with your own content and won&#39;t want to overwrite those customizations, so there isn&#39;t a need to clone it.After downloading the theme, note some unique aspects of the file structure: Although there&#39;s a _config.yml file in the root directory, it&#39;s there only so that Github Pages will build the theme. Because the theme is set up for single sourcing, there&#39;s a separate configuration file for each unique output you&#39;re building. All the configuration files are stored in the configs directory. Each configuration file has a different preview port. Each configuration file specifies a different project and potentially a different audience, product, platform, and version. By setting unique values for these properties in the includes/custom/conditions.html file, you determine how the sidebar and top navigation get constructed. You can build all the outputs in your configs directory by running the doc_multibuild_web.sh file in the root directory.The main goal of this theme is to enable single sourcing. With single sourcing, you build multiple outputs from the same source, with somewhat different content in each site based on the particular product, platform, version, and audience. You don&#39;t have to use this theme for single sourcing, but most tech writing projects involve this requirement.There are four configuration files in this project: config_writer.yml and config_designer.yml as well as their PDF equivalents. The idea is that there&#39;s an output specific to writers, and an output specific to designers. In reality, both of these outputs are pretty much the same. However, for the writers output, I&#39;ve conditionally excluded more lengthy explanations about how the theme works. The idea is that writers just want to create and publish content; in contrast, designers want to understand and modify the theme itself. Also, the configuration files use different themes.Build the writer&#39;s output:jekyll serve --config configs/config_writers.ymlThe --config parameter specifies the location of the configuration file to be used in the build. The configuration file itself contains the destination location for where the site gets built. Open a new tab in your browser and preview the site at the preview URL shown.Press Ctrl+C in Terminal to shut down the writer&#39;s output. Build the designers output:jekyll serve --config configs/config_designers.ymlOpen a new tab in your browser and preview the site at the preview URL shown. Notice how the themes differ (designers is blue, writers is green).Press Ctrl+C in Terminal to shut down the designer&#39;s output. Build both themes by running the following command:. doc_multibuild_web.shThe themes build in the ../doc_designers and ../doc_writers folders. Use finder and browse to one level above where you installed the project (probably username/projects). Open the writers and designers folders and click the index.html file. The themes should launch and appear similar to their appearance in the preview folder. This is because the themes are build using a relative link structure, so you can move the theme to any folder you want without breaking the links. If the theme builds both outputs successfully, great. You can move on to the other sections. If you run into errors building the themes, try to solve them before moving on. See  for more information.You can set up profiles in iTerm to initiate all your builds with one selection. See  for details. More information about building the PDF versions is provided in .QuestionsIf you have questions, contact me at tomjohnson1492@gmail.com. My regular site is idratherbewriting.com. I&#39;m eager to make these installation instructions as clear as possible, so please let me know if there are areas of confusion that need clarifying."
},







{
"title": "Series demo 1.1",
"tags": "",
"keywords": "",
"url": "doc_seriesdemo1_1.html",
"summary": "This is the second post in the series.",
"body": "            Series Demo                                             This is the second post in the series.Aliquam feugiat, nibh in ultrices mattis, felis ipsum venenatis metus, vel vehicula libero mauris a enim. Sed placerat est ac lectus vestibulum tempor. Quisque ut condimentum massa. Proin venenatis leo id urna cursus blandit. Vivamus sit amet hendrerit metus.Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aliquam vel sollicitudin felis. Sed eu arcu sed ipsum semper luctus eu a tortor. Suspendisse id leo eu metus laoreet varius. Mauris consequat accumsan ex, a iaculis metus fermentum a. Praesent sit amet fermentum leo. Aliquam feugiat, nibh in ultrices mattis, felis ipsum venenatis metus, vel vehicula libero mauris a enim. Sed placerat est ac lectus vestibulum tempor. Quisque ut condimentum massa. Proin venenatis leo id urna cursus blandit. Vivamus sit amet hendrerit metus.Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aliquam vel sollicitudin felis. Sed eu arcu sed ipsum semper luctus eu a tortor. Suspendisse id leo eu metus laoreet varius. Mauris consequat accumsan ex, a iaculis metus fermentum a. Praesent sit amet fermentum leo.     "
},




{
"title": "Commenting on files",
"tags": "navigation",
"keywords": "annotations, comments, feedback",
"url": "doc_commenting_on_files.html",
"summary": "You can add a button to your pages that allows people to add comments. Prose.io is an overlay on Github that would allow people to make comments in an easier interface.",
"body": "About the review processIf you&#39;re using the doc as code approach, you might also consider using the same techniques for reviewing the doc as people use in reviewing code. This approach will involve using Github to edit the files. There&#39;s an Edit me button on each page on this theme. This button allows collaborators to edit the content on Github.Here&#39;s the code for that button on the page.html layout:    &lt;a href=&quot;https://github.com/tomjohnson1492/documentation-theme-jekyll/blob/gh-pages/doc_commenting_on_files.md&quot; class=&quot;btn btn-default &quot; role=&quot;button&quot;&gt;&lt;i class=&quot;fa fa-github fa-lg&quot;&gt;&lt;/i&gt; Edit me&lt;/a&gt;Add reviewers as collaboratorsIf you want people to collaborate on your project so that their edits get committed to a branch on your project, you need to add them as collaborators. For your Github repo, click Settings and add the collaborators on the Collaborators tab using their Github usernames.If you don&#39;t want to allow anyone to commit to your Github branch, don&#39;t add the reviewers as collaborators. When someone makes an edit, Github will fork the theme. The person&#39;s edit then will appear as a pull request to your repo. You can then choose to merge the change indicated in the pull or not."
},




{
"title": "Troubleshooting",
"tags": "getting-started",
"keywords": "trouble, problems, support, error messages, problems, failure, error,",
"url": "doc_troubleshooting.html",
"summary": "This page lists common errors and the steps needed to troubleshoot them.",
"body": "Issues building the siteAddress already in useWhen you try to build the site, you get this error in iTerm: jekyll 2.5.3 | Error:  Address already in use - bind(2)This happens if a server is already in use. To fix this, edit your config file and change the port to a unique number.If the previous server wasn&#39;t shut down properly, you can kill the server process using these commands:ps aux | grep jekyllFind the PID (for example, it  looks like &quot;22298&quot;).Then type kill -9 22298 where &quot;22298&quot; is the PID.Alternatively, type the following to stop all Jekyll servers:kill -9 $(ps aux | grep &#39;[j]ekyll&#39; | awk &#39;{print $2}&#39;)Build not entirely finishingIf your build doesn&#39;t entirely finish on the command line, check to see if you have a space after a comma when using multiple configuration files, like this:jekyll serve --config config_base.yml, config_designer.ymlRemove the space after the comma, and the build will finish executing:jekyll serve --config config_base.yml,config_designer.ymlshell file not executableIf you run into permissions errors trying to run a shell script file (such as doc_multibuild_web.sh), you may need to change the file permissions to make the sh file executable. Browse to the directory containing the shell script and run the following:chmod +x build_writer.shPygments not installedThe config file requires pygments for the highlighter. You must download and install Pygments, which requires Python, in order to use this syntax highlighter. If you don&#39;t want to bother with Pygments, open the configuration file and change pygments to rouge.&quot;page 0&quot; cross references in the PDFIf you see &quot;page 0&quot; cross-references in the PDF, the URL doesn&#39;t exist. Check to make sure you actually included this page in the build. If it&#39;s not a page but rather a file, you need to add a noCrossRef class to the file so that your print stylesheet excludes the counter from it. Add class=&quot;noCrossRef&quot; as an attribute to the link. In the css/printstyles.css file, there is a style that should remove the counter from anchor elements with this class.The PDF is blankCheck the prince-file-list.txt file in the output to see if it contains links. If not, you have something wrong with the logic in the prince-file-list.txt file. Check the conditions.html file in your _includes to see if the audience specified in your configuration file aligns with the buildAudience in the conditions.html fileSidebar not appearingIf you build your site but the sidebar doesn&#39;t appear, check the following: Look in _includes/custom/conditions.html and make sure the conditional values there match up with the values declared in the configuration file. Specifically, you need to make sure you&#39;ve declared a value for project, product, platform, and version. If you don&#39;t have any values for these properties, you still need to keep them in your configuration file. Just put something like all as the value. This theme is designed for single sourcing. If you&#39;re only building one site, you can remove these values from the _includes/sidebar.html file and _data/sidebar.yml files.Understanding how the theme works can be helpful in troubleshooting. The _includes/sidebar.html file loops through the values in the _data/sidebar.yml file. There are if statements that check whether the conditions (as specified in the conditions.html file) are met. If the sidebar.yml item has the right product, platform, audience, and version, then it gets displayed in the sidebar. If not, it get skipped.Sidebar heading level not openingIn your _data/sidebar.yml file, you must also include the correct parameters (platform, product, audience version) for each heading. If an item contains something that should be displayed, the attributes for the heading should be listed.Without any attributes on heading levels, you could end up with scenarios where a section is entirely designed for one output but appears in every output regardless.Sidebar isn&#39;t collapsedIf the sidebar levels aren&#39;t collapsed, usually your JavaScript is broken somewhere. Open the JavaScript Console and look to see where the problem is. If one script breaks, then other scripts will break too, so troubleshooting it is a little tricky. Search isn&#39;t workingIf the search isn&#39;t working, check the JSON validity in the search.json file in your output folder. Usually something is invalid. Identify the problematic line, fix the file, or put search: exclude in the frontmatter of the file to exclude it from search."
},




{
"title": "Support",
"tags": "getting-started",
"keywords": "questions, troubleshooting, contact, support",
"url": "doc_support.html",
"summary": "Contact me for any support issues.",
"body": "I&#39;m actively developing this theme. Please let me know about any bugs or other issues that you find. Just email me at tomjohnson1492@gmail.com. You can also create issues directly within the Github repository here."
},




{
"title": "Customizing the theme",
"tags": "getting-started",
"keywords": "getting started, customization, beginning steps, modifying the theme, modification",
"url": "doc_customizing_the_theme.html",
"summary": "You start customizing the theme by gutting the existing content in this theme and replacing it with your own content. Start with the configuration files, then customize the data files, and add your own markdown pages in the root directory.",
"body": "About customizing the themeThe theme shows two build outputs: one for designers, and one for writers. The dual outputs is an example of the single sourcing nature of the theme. The designers output is comprehensive, whereas the writers output is a subset of the information. Follow these steps to customize the theme with your own content.In these instructions, I&#39;ll assume your project&#39;s name is &quot;acme.&quot; I&#39;ll also assume you have two audiences you&#39;re building your acme project for: marketers and developers. To customize the theme:In the theme&#39;s root directory, rename config_writer.yml to config_marketer.yml and customize all the values inside that file based on the instructions in . Do the same with config_designer.yml (changing it to config_developer.yml) and continue to clone and customize the config file for other audiences you need.In this theme, each output requires a separate config file. If you have 10 audiences and you want separate sites for each, then then you&#39;ll have 10 config files in this directory. Make similar customizations to the PDF configuration files. You will later use these files when you create PDFs.As you customize the config files, make the port values unique so that you don&#39;t run into &quot;Address already in use&quot; issues when you build multiple sites and want to preview them at the same time.In the _includes/custom directory, open conditions.html and customize the values there specific to your outputs. (Basically, replace writer with  developer, and designer with marketer.) The conditions.html file is used to apply different requirements to the sidebar and other files. The conditions.html file is included in various parts of the theme &mdash; the sidebar.html, the topnav.html, and some of the print files. conditions.html is sort of the brains of the theme. If you don&#39;t have a specific value for audience, version, platform, or product, just put all.Remove the pages that begin with &quot;doc_&quot; in the root directory, and then add your own pages here. Leave all the files flat in the root directory. If you nest files inside folders, you&#39;ll create problems for the links and the theme will break. Yes, this will result in a lot of files in the root directory, but you can get around this issue with some viewing strategies in your text editor.For example, with WebStorm, if you press Shift twice and type the file name you want, the editor finds it. I usually have the preview mode open in another browser and navigate the content that way. When I want to edit a specific file, I copy the filename path from the preview browser, press Shift twice, and then it opens. You can also create a favorites section that just shows files you&#39;ve added to Favorites (an option in the context menu).Inside _data, open sidebar_doc.yml and topnav_doc.yml and customize the navigation. Don&#39;t mess up the spacing or change any of the YML level names or the site or sidebar won&#39;t appear. Each new YML level is indented with two spaces. Sometimes getting this spacing right is tricky. I recommend you save the sample template here that shows the various levels, and then just copy and paste the levels where you need them. YML is very picky and it can be frustrating sorting out spacing and level issues. In the root directory, customize the index.md file. This file will be the homepage for all of your projects.Use conditional tags (for example, {% if site.project == &quot;writers&quot; %} ... {% endif %}) to change the content for different builds of your site. See  for more information on applying conditions.In the _includes folder, open footer.html and customize the content (namely the footer image). If you have different footers for different outputs, use conditional tags as you did with index.md.Build your site with a command such as jekyll serve --config configs/config_writers.yml etc., and preview it at the URLs provided."
},







{
"title": "Themes",
"tags": "publishing",
"keywords": "themes, styles, colors, css",
"url": "doc_themes.html",
"summary": "You can choose between two different themes (one green, the other blue) for your projects. The theme CSS is stored in the CSS folder and configured in the configuration file for each project.",
"body": "Theme optionsYou can choose a green or blue theme, or you can create your own. In the css folder, there are two theme files: theme-blue.css and theme-green.css. These files have the most common CSS elements extracted in their own CSS file. Just change the hex colors to the ones you want.In the configuration file, specify the theme file you want the output to use &mdash; for example, theme_file: theme-green.css.Theme differencesThe differences between the themes is fairly minimal. The main navigation bar, sidebar, buttons, and heading colors change color. That&#39;s about it. In a more sophisticated theming approach, you could use Sass files to generate rules based on options set in a data file, but I kept things simple here."
},




{
"title": "Series",
"tags": "content-types",
"keywords": "series, connected articles, tutorials, hello world",
"url": "doc_series.html",
"summary": "You can automatically link together topics belonging to the same series. This helps users know the context within a particular process.",
"body": "Using series for pagesYou create a series by looking for all pages within a tag namespace that contain certain frontmatter. Here&#39;s a demo. 1. Create the series buttonFirst create an include that contains your series button:&lt;div class=&quot;seriesContext&quot;&gt;    &lt;div class=&quot;btn-group&quot;&gt;        &lt;button type=&quot;button&quot; data-toggle=&quot;dropdown&quot; class=&quot;btn btn-primary dropdown-toggle&quot;&gt;Series Demo &lt;span class=&quot;caret&quot;&gt;&lt;/span&gt;&lt;/button&gt;        &lt;ol class=&quot;dropdown-menu&quot;&gt;            {% assign pages = site.pages | sort:&quot;weight&quot;  %}            {% for p in pages %}            {% if p.series == &quot;ACME series&quot; %}            {% if p.url == page.url %}            &lt;li class=&quot;active&quot;&gt; → {{p.weight}}. {{p.title}}&lt;/li&gt;            {% else %}            &lt;li&gt;                &lt;a href=&quot;{{p.url | replace: &#39;/&#39;,&#39;&#39;}}&quot;&gt;{{p.weight}}. {{p.title}}&lt;/a&gt;            &lt;/li&gt;            {% endif %}            {% endif %}            {% endfor %}        &lt;/ol&gt;    &lt;/div&gt;&lt;/div&gt;Change &quot;ACME series&quot; to the name of your series. Save this in your _includes folder as something like series_acme.html.Note that with pages, there isn&#39;t a universal namespace created from tags or categories like there is with Jekyll posts. As a result, you have to loop through all pages. If you have a lot of pages in your site (e.g., 1,000+), then this looping will create a slow build time. If this is the case, you will need to rethink the approach to looping here.2. Create the &quot;next&quot; includeThis will be the next button at the bottom of the page:&lt;p&gt;{% assign series_pages = site.tags.series_acme %}    {% for p in pages %}    {% if p.series == &quot;ACME series&quot; %}    {% assign nextTopic = page.weight | plus: &quot;0.1&quot;  %}    {% if p.weight == nextTopic  %}    &lt;a href=&quot;{{p.url | replace: &#39;/&#39;,&#39;&#39;}}&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-primary&quot;&gt;Next: {{p.weight}}  {{p.title}}&lt;/button&gt;&lt;/a&gt;    {% endif %}    {% endif %}    {% endfor %}&lt;/p&gt;Change &quot;acme&quot; to the name of your series. Save this in your _includes folder as series_acme_next.html. 3. Add the correct frontmatter to each of your series pagesNow add the following frontmatter to each page in the series:series: &quot;ACME series&quot;weight: 1.0With weight, you could use 1, 2, 3, etc.., but Jekyll will treat 10 as coming after 1. This is why I use 1.0 and 1.1, 1.2, etc. If you do use whole numbers, change the plus: &quot;0.1&quot; to plus: &quot;1&quot;.4. Add links to the series button and next button on each page.On each series page, add a link to the series button at the top and a link to the next button at the bottom.&lt;!-- your frontmatter goes here --&gt;{% include custom/doc/series_acme.html %}&lt;!-- your page content goes here ... --&gt;{% include custom/doc/series_acme_next.html %}Changing the series drop-down colorThe Bootstrap menu uses the primary class for styling. If you change this class in your theme, the Bootstrap menu should automatically change color as well. You can also just use another Bootstrap class in your button code. Instead of btn-primary, use btn-info or btn-warning. See  for more Bootstrap button classes."
},







{
"title": "About this theme",
"tags": "getting-started",
"keywords": "documentation theme, jekyll, technical writers, help authoring tools, hat replacements",
"url": "doc_about.html",
"summary": "I use this theme for sophisticated single-sourcing projects that I work on as a professional technical writer.",
"body": "My name is Tom Johnson, and I&#39;m a technical writer, blogger, and podcaster based in San Jose, California. My blog is here: http://idratherbewriting.com. I write several posts there a week. See my blog&#39;s about page for more details about me.I&#39;m using this theme for my documentation projects. This theme has undergone several major iterations, and now it&#39;s fairly stable and full of all the features that I need. You are welcome to use it for your documentation projects for free.I think this theme does pretty much everything that you can do with something like OxygenXML, but without the constraints of structured authoring. Everything is completely open and changeable, so if you start tinkering around with the theme&#39;s files, you can break things. But it&#39;s completely empowering as well!With a completely open architecture and code base, you can modify the code to make it do exactly what you want, without having to jump through all kinds of confusing or proprietary code.If there&#39;s a feature you need but it isn&#39;t available here, let me know and I might add it. Alternatively, if you fork the theme, I would love to see your modifications and enhancements."
},




{
"title": "Pushing builds to server",
"tags": "publishing",
"keywords": "AWS, Amazon, command line, pushing build",
"url": "doc_push_build_to_server.html",
"summary": "You can push your build to AWS using commands from the command line. By including your copy commands in commands, you can package all of the build and deploy process into executable scripts.",
"body": "Pushing to AWS S3If you have the AWS Command Line Interface installed and are pushing your builds to AWS, the following commands show how you can build and push to an AWS location from the command line:#aws s3 cp ~/users/tjohnson/projects/documentation-theme-jekyll-builds/doc_writers s3://[aws path]documentation-theme-jekyll/doc_writers --recursive#aws s3 cp ~/users/tjohnson/projects/documentation-theme-jekyll-builds/doc_designers s3://[aws path]/documentation-theme-jekyll/doc_designers --recursiveThe first path is the local location; the second path is the destination.Pushing to a regular serverIf you&#39;re pushing to a regular server that you can ssh into, you can use scp commands to push your build. Here&#39;s an example:scp -r /users/tjohnson/projects/documentation-theme-jekyll-builds/doc_writers name@domain:/var/www/html/documentation-theme-jekyll/doc_writersSimilar to the above, the first path is the local location; the second path is the destination."
},




{
"title": "Special layouts overview",
"tags": "special-layouts",
"keywords": "layouts, information design, presentation",
"url": "doc_special_layouts.html",
"summary": "This theme has a few special layouts. Special layouts include the JS files they need directly in the page. The JavaScript for each special layout does not load by default for every page in the site.",
"body": "By &quot;layout,&quot; I&#39;m not referring to the layouts in _layouts in the project files. I&#39;m referring to special ways of presenting information on the same &quot;page&quot; layout. FAQ layoutSee  for an example of the FAQ format, which follows an accordion, collapse/expand format. This code is from Bootstrap.Knowledgebase layoutSee  for a possible layout for knowledge base articles. This layout looks for pages containing specific tags.Scroll layoutIf you have a long JSON message you&#39;re documenting, see the . This layout adds a side pane showing links to pointers in the left pane. Shuffle layoutIf you want a dynamic card layout that allows you to filter the cards, see . This uses the Shuffle JS library."
},




{
"title": "Icons",
"tags": "formatting",
"keywords": "font icons, buttons, images, vectors, font awesome, glyphicons",
"url": "doc_icons.html",
"summary": "You can integrate font icons through the Font Awesome and Glyphical Halflings libraries. These libraries allow you to embed icons through their libraries delivered as a link reference. You don't need any image libraries downloaded in your project.",
"body": "Font icon optionsThe theme has two font icon sets integrated: Font Awesome and Glyphicons Halflings. The latter is part of Bootstrap, while the former is independent. Font icons allow you to insert icons drawn as vectors from a CDN (so you don&#39;t have any local images on your own site).See Font Awesome icons availableGo to the Font Awesome library to see the available icons.The Font Awesome icons allow you to adjust their size by simply adding fa-2x, fa-3x and so forth as a class to the icon to adjust their size to two times or three times the original size. As vector icons, they scale crisply at any size.Here&#39;s an example of how to scale up a camera icon:&lt;i class=&quot;fa fa-camera-retro&quot;&gt;&lt;/i&gt; normal size (1x)&lt;i class=&quot;fa fa-camera-retro fa-lg&quot;&gt;&lt;/i&gt; fa-lg&lt;i class=&quot;fa fa-camera-retro fa-2x&quot;&gt;&lt;/i&gt; fa-2x&lt;i class=&quot;fa fa-camera-retro fa-3x&quot;&gt;&lt;/i&gt; fa-3x&lt;i class=&quot;fa fa-camera-retro fa-4x&quot;&gt;&lt;/i&gt; fa-4x&lt;i class=&quot;fa fa-camera-retro fa-5x&quot;&gt;&lt;/i&gt; fa-5xHere&#39;s what they render to: 1x fa-lg fa-2x fa-3x fa-4x fa-5xWith Font Awesome, you always use the i tag with the appropriate class. You also implement fa as a base class first. You can use font awesome icons inside other elements. Here I&#39;m using a Font Awesome class inside a Bootstrap alert:&lt;div class=&quot;alert alert-danger&quot; role=&quot;alert&quot;&gt;&lt;i class=&quot;fa fa-exclamation-circle&quot;&gt;&lt;/i&gt; &lt;b&gt;Warning: &lt;/b&gt;This is a special warning message.Here&#39;s the result: This is a special warning message.The notes, tips, warnings, etc., are pre-coded with Font Awesome and stored in the alerts.yml file. That file includes the following:tip: &#39;&lt;div class=&quot;alert alert-success&quot; role=&quot;alert&quot;&gt;&lt;i class=&quot;fa fa-check-square-o&quot;&gt;&lt;/i&gt; &lt;b&gt;Tip: &lt;/b&gt;&#39;note: &#39;&lt;div class=&quot;alert alert-info&quot; role=&quot;alert&quot;&gt;&lt;i class=&quot;fa fa-info-circle&quot;&gt;&lt;/i&gt; &lt;b&gt;Note: &lt;/b&gt;&#39;important: &#39;&lt;div class=&quot;alert alert-warning&quot; role=&quot;alert&quot;&gt;&lt;i class=&quot;fa fa-warning&quot;&gt;&lt;/i&gt; &lt;b&gt;Important: &lt;/b&gt;&#39;warning: &#39;&lt;div class=&quot;alert alert-danger&quot; role=&quot;alert&quot;&gt;&lt;i class=&quot;fa fa-exclamation-circle&quot;&gt;&lt;/i&gt; &lt;b&gt;Warning: &lt;/b&gt;&#39;end: &#39;&lt;/div&gt;&#39;callout_danger: &#39;&lt;div class=&quot;bs-callout bs-callout-danger&quot;&gt;&#39;callout_default: &#39;&lt;div class=&quot;bs-callout bs-callout-default&quot;&gt;&#39;callout_primary: &#39;&lt;div class=&quot;bs-callout bs-callout-primary&quot;&gt;&#39;callout_success: &#39;&lt;div class=&quot;bs-callout bs-callout-success&quot;&gt;&#39;callout_info: &#39;&lt;div class=&quot;bs-callout bs-callout-info&quot;&gt;&#39;callout_warning: &#39;&lt;div class=&quot;bs-callout bs-callout-warning&quot;&gt;&#39;hr_faded: &#39;&lt;hr class=&quot;faded&quot;/&gt;&#39;hr_shaded: &#39;&lt;hr class=&quot;shaded&quot;/&gt;&#39;This means you can insert a tip, note, warning, or important alert simply by using these tags:{{site.data.alerts.note}} Add your note here. {{site.data.alerts.end}}Here&#39;s the result:Add your note here. Here&#39;s my tip. This information is very important.If you overlook this, you may die. The color scheme is the default colors from Bootstrap. You can modify the icons or colors as needed.Creating your own combinationsYou can innovate with your own combinations. Here&#39;s a similar approach with a file download icon:&lt;div class=&quot;alert alert-success&quot; role=&quot;alert&quot;&gt;&lt;i class=&quot;fa fa-download fa-lg&quot;&gt;&lt;/i&gt; This is a special tip about some file to download....&lt;/div&gt;And the result: This is a special tip about some file to download....Grab the right class name from the Font Awesome library and then implement it by following the pattern shown previously.If you want to make your fonts even larger than the 5x style, add a custom style to your stylesheet like this:.fa-10x{font-size:1700%;}Then any element with the attribute fa-10x will be enlarged 1700%.Glyphicon icons availableGlyphicons work similarly to Font Awesome. Go to the Glyphicons library to see the icons available. Although the Glyphicon Halflings library doesn&#39;t provide the scalable classes like Font Awesome, there&#39;s a StackOverflow trick  to make the icons behave in a similar way. This theme&#39;s stylesheet (customstyles.css) includes the following to the stylesheet:.gi-2x{font-size: 2em;}.gi-3x{font-size: 3em;}.gi-4x{font-size: 4em;}.gi-5x{font-size: 5em;}Now you just add gi-5x or whatever to change the size of the font icon:&lt;span class=&quot;glyphicon glyphicon-globe gi-5x&quot;&gt;&lt;/span&gt;And here&#39;s the result:Glypicons use the span element instead of i to attach their classes. Here&#39;s another example:&lt;span class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/span&gt;And magnified:&lt;span class=&quot;glyphicon glyphicon-download gi-3x&quot;&gt;&lt;/span&gt;You can also put glyphicons inside other elements:&lt;div class=&quot;alert alert-danger&quot; role=&quot;alert&quot;&gt;  &lt;span class=&quot;glyphicon glyphicon-exclamation-sign&quot; aria-hidden=&quot;true&quot;&gt;&lt;/span&gt;  &lt;b&gt;Error:&lt;/b&gt; Enter a valid email address&lt;/div&gt;    Error: Enter a valid email addressCalloutsThe previously shown alerts might be fine for short messages, but with longer notes, the solid color takes up a bit of space. In this theme, you also have the option of using callouts, which are pretty common in Bootstrap&#39;s documentation but surprisingly not offered as an explicit element. Their styles have been copied into this theme, in a way similar to the alerts:&lt;div class=&quot;bs-callout bs-callout-info&quot;&gt; This is a special info message. This is a special info message. This is a special info message. This is a special info message. This is a special info message. This is a special info message. This is a special info message. This is a special info message. This is a special info message. &lt;/div&gt; This is a special info message. This is a special info message. This is a special info message. This is a special info message. This is a special info message. This is a special info message. This is a special info message. This is a special info message. This is a special info message. And here&#39;s the shortcode:{{site.data.alerts.callout_info}}&lt;div class=&quot;bs-callout bs-callout-info&quot;&gt;{{site.data.alerts.end}}You can use any of the following:{{callout_danger}} {{site.data.alerts.callout_default}} {{site.data.alerts.callout_primary}} {{site.data.alerts.callout_success}} {{site.data.alerts.callout_info}} {{site.data.alerts.callout_warning}} Callouts are explained in a bit more detail here: ."
},




{
"title": "iTerm profiles",
"tags": "publishing",
"keywords": "iterm, terminal, build shortcuts, mac",
"url": "doc_iterm_profiles.html",
"summary": "Set up profiles in iTerm to facilitate the build process with just a few clicks. This can make it a lot easier to quickly build multiple outputs.",
"body": "About iTerm profilesWhen you&#39;re working with tech docs, a lot of times you&#39;re single sourcing multiple outputs. It can be a hassle to fire up each one of these outputs using the build files containing the shell scripts. Instead, it&#39;s easier to configure iTerm with profiles that initiate the scripts.Set up profilesOpen iTerm and go to Profiles &gt; Open Profiles.Click Edit Profiles.Click the + button in the lower-left corner to create a new profile.In the Name field, type a name describing the output, such as Doc theme -- designers.In the Send text at start field, type the command for the build script, such as this:jekyll serve --config configs/config_designers.ymlLeave the Login shell option selected.In the Working Directory section, select Directory and enter the directory for your project, such as /Users/tjohnson/projects/documentation-theme-jekyll.Close the profiles panel.Here&#39;s an example:Launching a profileIn iTerm, make sure the Toolbar is shown. Go to View &gt; Toggle Toolbar.Click the New button and select your profile.When you&#39;re done with the session, make sure to click Ctrl+C."
},







{
"title": "Images",
"tags": "formatting",
"keywords": "images, screenshots, vectors, svg, markdown syntax",
"url": "doc_images.html",
"summary": "You embed images using traditional HTML or Markdown syntax for images. Unlike pages, you can store images in subfolders (in this theme). This is because when pages reference the images, the references are always as subpaths, never requiring the reference to move up directories.",
"body": "You embed an image the same way you embed other files or assets: you put the file into a folder, and then link to that file. Put images inside the images folder in your root directory. You can create subdirectories inside this directory. Although you could use Markdown syntax for images, the HTML syntax is probably easier:&lt;img title=&quot;my sample page&quot; src=&quot;images/jekyll.png&quot; /&gt;And the result:Here&#39;s the same Markdown syntax:![My sample page](images/jekyll.png)And the result:SVG ImagesYou can also embed SVG graphics. If you use SVG, you need to use the HTML syntax so that you can define a width/container for the graphic. Here&#39;s a sample embed:&lt;img src=&quot;images/dicloud/dicloud_architecture.svg&quot; style=&quot;max-width: 700px;&quot; /&gt;Here&#39;s the result:SVG images will expand to the size of their artboard, so you can either set the artboard the right size when you create the graphic in Illustrator, or you can set an inline style that confines the size to a certain width as shown in the code above.Also, if you&#39;re working with SVG graphics, note that Firefox does not support SVG fonts. In Illustrator, when you do a Save As with your AI file and choose SVG, to preserve your fonts, in the Font section, select &quot;Convert to outline&quot; as the Type (don&#39;t choose SVG in the Font section).Also, remove the check box for &quot;Use textpath element for text on a path&quot;. And select &quot;Embed&quot; rather than &quot;Link.&quot; The following screenshot shows the settings I use. Your graphics will look great in Firefox."
},










{
"title": "Tooltips",
"tags": "formatting",
"keywords": "popovers, tooltips, user interface text, glossaries, definitions",
"url": "doc_adding_tooltips.html",
"summary": "You can add tooltips to any word, such as an acronym or specialized term. Tooltips work well for glossary definitions, because you don't have to keep repeating the definition, nor do you assume the reader already knows the word's meaning.",
"body": "Creating tooltipsBecause this theme is built on Bootstrap, you can simply use a specific attribute on an element to insert a tooltip. Suppose you have a glossary.yml file inside your _data folder. You could pull in that glossary definition like this:&lt;a href=&quot;#&quot; data-toggle=&quot;tooltip&quot; data-original-title=&quot;{{site.data.glossary.jekyll_platform}}&quot;&gt;Jekyll&lt;/a&gt; is my favorite tool for building websites.&lt;/a&gt;This renders to the following:Jekyll is my favorite tool for building websites."
},













{
"title": "Conditional logic",
"tags": "single-sourcing",
"keywords": "if else logic, conditions, conditional attributes, conditional filtering",
"url": "doc_conditional_logic.html",
"summary": "You can implement advanced conditional logic that includes if statements, or statements, unless, and more. This conditional logic facilitates single sourcing scenarios in which you're outputting the same content for different audiences.",
"body": "About Liquid and conditional statementsIf you want to create different outputs for different audiences, you can do all of this using a combination of Jekyll&#39;s Liquid markup and values in your configuration file.You can then incorporate conditional statements that check the values in the configuration files.Definitely check out Liquid&#39;s documentation for more details about how to use operators and other liquid markup. The notes here are a small, somewhat superficial sample from the site.Where to store filtering valuesYou can filter content based on values that you have set either in your config file or in a file in your _data folder. If you set the attribute in your config file, you need to restart the Jekyll server to see the changes. If you set the value in a file in your _data folder, you don&#39;t need to restart the server when you make changes. Required conditional attributesThis theme requires you to add the following attributes in your configuration file:project audienceproduct platform versionIf you&#39;ve ever used DITA, you probably recognize these attributes, since DITA has mostly the same ones. I&#39;ve found that most single-sourcing projects I work on can be sliced and diced in the ways I need using these conditional attributes.If you&#39;re not single sourcing and you find it annoying having to specify these attributes in your sidebar, you can rip out the logic from the sidebar.html, topnav.html file and any other places where conditions.html appears; then you wouldn&#39;t need these attributes in your configuration file.Conditional logic based on config file valueHere&#39;s an example of conditional logic based on a value in the configs/config_writer.yml file. In my config_writer.yml file, I have the following:audience: writersOn a page in my site (it can be HTML or markdown), I can conditionalize content using the following:{% if site.audience == &quot;writers&quot; %}The writer audience should see this...{% elsif site.audience == &quot;designers&quot; %}The designer audience should see this ...{% endif %}This uses simple if-elsif logic to determine what is shown (note the spelling of elsif). The else statement handles all other conditions not handled by the if statements. Here&#39;s an example of if-else logic inside a list:To bake a casserole:1. Gather the ingredients.{% if site.audience == &quot;writer&quot; %}2. Add in a pound of meat.{% elsif site.audience == &quot;designer&quot; %}3. Add in an extra can of beans.{% endif %}3. Bake in oven for 45 min.You don&#39;t need the elsif or else. You could just use an if (but be sure to close it with endif).Or operatorYou can use more advanced Liquid markup for conditional logic, such as an or command. See Shopify&#39;s Liquid documentation for more details. For example, here&#39;s an example using or:{% if site.audience contains &quot;vegan&quot; or site.audience == &quot;vegetarian&quot; %}    // run this.{% endif %}Note that you have to specify the full condition each time. You can&#39;t shorten the above logic to the following:{% if site.audience contains &quot;vegan&quot; or &quot;vegetarian&quot; %}    // run this.{% endif %}This won&#39;t work.Unless operatorYou can also use unless in your logic, like this:{% unless site.print == true %}...{% endunless %}When figuring out this logic, read it like this: &quot;Run the code here unless this condition is satisfied.&quot; Or &quot;If this condition is satisfied, don&#39;t run this code.&quot;Don&#39;t read it the other way around or you&#39;ll get confused. (It&#39;s not executing the code only if the condition is satisfied.)In this situation, if site.print == true, then the code will not be run here.Storing conditions in the _data folderHere&#39;s an example of using conditional logic based on a value in a data file:{% if site.data.options.output == &quot;alpha&quot; %}show this content...{% elsif site.data.options.output == &quot;beta&quot; %}show this content...{% else %}this shows if neither of the above two if conditions are met.{% endif %}To use this, I would need to have a _data folder called options where the output property is stored.I don&#39;t really use the _data folder as much for project options. I store them in the configuration file because I usually want different projects to use different values for the same property. For example, maybe a file or function name is called something different for different audiences. I currently single source the same content to at least two audiences in different markets.For the first audience, the function name might be called generate, but for the second audience, the same function might be called called expand. In my content, I&#39;d just use {{site.function}}. Then in the configuration file I change its value appropriately for the audience.Specifying the location for _dataYou can also specify a data_source for your data location in your configuration file. Then you aren&#39;t limited to simply using _data to store your data files.For example, suppose you have 2 projects: alpha and beta. You might store all the data files for alpha inside data_alpha, and all the data files for beta inside data_beta.In your alpha configuration file, specify the data source like this:data_source: data_alphaThen create a folder called _data_alpha.For your beta configuratoin file, specify the data source like this:data_source: data_betaThen create a folder called _data_beta.Conditional logic based on page namespaceYou can also create conditional logic based on the page namespace. For example, create a page with front matter as follows:---layout: pageuser_plan: full---Now you can run logic based on the conditional property in that page&#39;s front matter:{% if page.user_plan == &quot;full&quot; %}// run this code{% endif %}Conditions versus includesIf you have a lot of conditions in your text, it can get confusing. As a best practice, whenever you insert an if condition, add the endif at the same time. This will reduce the chances of forgetting to close the if statement. Jekyll won&#39;t build if there are problems with the liquid logic. If your text is getting busy with a lot of conditional statements, consider putting a lot of content into includes so that you can more easily see where the conditions begin and end."
},




{
"title": "Setting configuration options",
"tags": "single-sourcingpublishing",
"keywords": "configuration, config, publishing options, outputs, projects",
"url": "doc_configuration_settings.html",
"summary": "The configuration file contains important settings for your project. Some of the values you set here affect &mdash; especially the product, platform, audience, and version &mdash; the display and functionality of the theme.",
"body": "Importance of Configuration FileThe configuration file serves important functions with single sourcing. For each site output, you create a unique configuration file for that output. The configuration file contains all the settings and other details unique to that site output, such as variables, titles, output directories, build folders, and more.This theme is coded to look for specific values set by the configuration file. If something isn&#39;t working correctly, check to make sure that you have the configuration values that are defined here.Configuration file optionsSome of the options you can set in the configuration file determine theme settings. Note that you can define arbitrary key-value pairs in the configuration file, and then you can access them through site.yourkey, where yourkey is the name of the key. However, the values in these tables are used to control different aspects of the theme and are not arbitrary key-value pairs.Configuration settings for web outputsFieldRequired?DescriptionprojectRequiredA unique name for the project. The _includes/custom/conditions.html file will use this project name to determine what sidebar and top nav data files to use. Make this value unique. Note that the project name also determines what conditions are set in the _includes/conditions.html file. Therefore it&#39;s critical that the project name you specify in the configuration file matches the project names in the conditions.html file. Otherwise, the conditions.html file won&#39;t be able to set the right variables needed for single sourcing.audienceRequiredThe audience for the output. Each entry in _data/sidebar_doc.yml and  _data/topnav_doc.yml needs to have an audience attribute that matches the value here in order for the sidebar or topnav item to be included.platformRequiredThe platform for the output. See additional information in audience.productRequiredThe product for the output. See additional information in audience.versionRequiredThe version for the output. See additional information in audience.destinationRequiredThe folder where the site is built. If you put this into your same folder as your other files, Jekyll may start building and rebuilding in an infinite loop because it detects more files in the project folder. Make sure you specify a folder outside your project folder, by using ../ or by specifying the absolute path, such as /Applications/XAMPP/xamppfiles/htdocs/myfolder.project_file_nameRequiredThe shortname for your project that you preface each file name with (for example, doc). This label is used to specify the prefix for the tag archives files (which are named with titles such as doc_tag-formatting.html). The raw code in the theme is &lt;a href=&quot;{{site.project_file_name}}_tag-{{tag}}.html&quot;&gt; The {{site.project_file_name}} field renders as doc in the sample theme. The {{tag}} is populated by a &quot;for&quot; loop through the tags property specified in page frontmatter.sidebar_taglineOptionalAppears above the sidebar. Usually you put some term related to the site specific build, such as the audience. In the sample theme files, the taglines are &quot;writers&quot; and &quot;designers.&quot;sidebar_versionOptionalAppears below the sidebar_tagline in a smaller font, usually specifying the version of the documentation. In the sample theme files, the version is &quot;3.0.&quot;topnav_titleRequiredAppears next to the home button in the top nav bar. In the sample theme files, the topnav_title is &quot;Jekyll Documentation Theme.&quot;homepage_titleRequiredYou set the title for your homepage via this setting. This is because multiple projects are all using the same index.md as their homepage. Because index.md has homepage: true in the frontmatter, the &quot;page&quot; layout will use the homepage_title property from the configuration file instead of the traditional title in the frontmatter. In the sample theme files, the homepage title is &quot;Jekyll Documentation Theme -- {audience}.&quot;site_titleAppears in the webpage title area (on the browser tab, not in the page viewing area). In the sample theme files, the site title is the &quot;page namehomepage title.&quot;portRequiredThe port used in the preview mode. This is only for the live preview and doesn&#39;t affect the published output. If you serve multiple outputs simultaneously, the port must be unique.feedback_emailGets configured as the email address in the Send Feedback button in the top navigation bar.disqus_shortnameOptionalThe disqus site shortname, which is used for comments. If you don&#39;t want comment forms via disqus, leave this blank or omit it altogether and Disqus won&#39;t appear.markdownRequiredThe processor to use for Markdown. This is a Jekyll-specific setting. Use redcarpet. Another option is kramdown. However, my examples will follow redcarpet.redcarpetRequiredExtensions used with redcarpet. You can read more about them by searching for redcarpet extensions online.highlighterOptionalThe syntax highlighter used. Use pygments because it&#39;s required you&#39;re publishing on Github Pages. You will need to install Pygments on your machine or else you will see an error. Pygments is based on Python. If you run into build errors and aren&#39;t publishing on Github Pages, rouge is also an option.excludeOptionalA list of files and directories that you want excluded from the build. By default, all the content in your project is included in the output.defaultsOptionalHere you can set default values for frontmatter based on the content type (page, post, or collection).collectionsOptionalAny specific collections (custom content types that extend beyond pages or posts) that you want to define. This theme defines a collection called tooltips. You access this collection by using site.tooltips instead of site.pages or site.posts. Put the tooltip content types inside a folder in your project called _tooltips.printOptionalBoolean. Whether this build is a print build or not. This setting allows you to run conditions in your content such as  {% if site.print == true %} do this... {% endif %} .suffixOptionalIf you publish on Salesforce&#39;s site.com, you have to add index.html to the permalink or else the page won&#39;t render. If you add suffix: index.html in your config file, this suffix will be appended in the homepage URL. If you&#39;re not publishing to Salesforce, don&#39;t add this property to your configuration file.Where to store configuration filesIn this theme, the configuration files are listed in the configs directory. There are some build scripts in the root directory that simply reference the configuration files.The conditional attributesEach configuration file must specify values for the conditional attributes:projectproductplatformaudienceversionThe sidebar.html and topnav.html files apply conditional logic based on the values for these conditional attributes. For example, you will see this kind of logic in the sidebar and topnav files:  {% if item.audience contains audience and item.product contains product and item.platform contains platform and item.version contains version and item.web != false %}If all of these conditions are met, then the item will qualify to be included in the sidebar or top navigation file. That is why each item in the sidebar_doc.yml or topnav_doc.yml file includes similar properties to match: - title: Pages  url: /doc_pages.html  audience: writers, designers  platform: all  product: all  version: allThe file in _includes/custom/conditions.html contains a project setting and also assigns general names for each of these specific values. This way the same theme files can be used interchangeably depending on the assignments, whose values are specified in the configuration file.It&#39;s a little complicated to describe, but it works. Once you configure your project correctly, you don&#39;t even think about how the theme is processing all of this on the backend.Configuration settings for PDF outputThe PDF configuration files build on all the settings in the web configuration files, but they add a few more options. When you build the PDF output (such as for the writers output), the command will look like this:jekyll serve --detach --config configs/config_writers.yml,configs/config_writers_pdf.ymlFirst Jekyll will read the config_writers.yml file, and then Jekyll will read the config_writers_pdf.yml file.More detail about generating PDFs is provided in , but the configuration settings used for the PDFs are described here.The process for creating PDFs relies on two steps:First you build a printer-friendly web version of the content. Then you run PrinceXML to get all the printer-friendly web pages and package them into a PDF.Thus, you actually build a web version for the PDF first before generating the PDF. (You might be able to remove this first step by doing more coding, but I found it easier just to strip out components I didn&#39;t want included and make other adjustments.)FieldRequired?DescriptiondestinationWhere the PDF web version should be served so that Prince XML can find it. By default, this is in ../doc_designers-pdf, so just one level above where your project is.urlThe URL where the files can be viewed. This is http://127.0.0.1:4002 in the sample theme files for the designers output. Prince XML requires a URL to access the file. (My attempts to use local file paths didn&#39;t work.)baseurlThe subdirectory after the url where the content is stored. In the sample theme files for the designers output, this is /designers.portThe port required by the preview server.printA boolean so that you can construct conditional statements in your content to check whether print is true or not. This setting can help you filter out content that doesn&#39;t fit well into a PDF (such as dynamic web elements).print_titleThe title for the PDF. In the sample theme files for designers output, the print title is &quot;Jekyll Documentation Theme for Designers&quot;print_subtitleThe subtitle for the PDF. In the sample theme files, the subtitle is &quot;version 3.0.&quot;defaultsSee the sample settings in the config_designers_pdf.yml file. The only difference between this file and config_designers.yml is that the layout used for pages is page_print instead of page. The page_print layout also used head_print instead of head. This layout strips out components such as the sidebar and top navigation. It also leverages printstyles.css and includes some JavaScript for Prince XML."
},




{
"title": "Content reuse",
"tags": "single-sourcing",
"keywords": "includes, conref, dita, transclusion, transclude, inclusion, reference",
"url": "doc_content_reuse.html",
"summary": "You can reuse chunks of content by storing these files in the includes folder. You then choose to include the file where you need it. This works similar to conref in DITA, except that you can include the file in any content type.",
"body": "About content reuseYou can embed content from one file inside another using includes. Put the file containing content you want to reuse (e.g., mypage.html) inside the _includes folder, and then use a tag like this:{% include mypage.html %}With content in your _includes folder, you don&#39;t add any frontmatter to these pages because they will be included on other pages already containing frontmatter.Also, when you include a file, all of the file&#39;s contents get included. You can&#39;t specify that you only want a specific part of the file included. However, you can use parameters with includes. See Jekyll&#39;s documentation for more information on that.Page-level variablesYou can also create custom variables in your frontmatter like this: ---title: Page-level variablespermalink: /page_level_variables/thing1: Joething2: Dave---You can then access the values in those custom variables using the page namespace, like this:thing1: {{page.thing1}}thing2: {{page.thing2}}Honestly, I haven&#39;t found a tremendous use case for page-level variables, but it&#39;s nice to know they&#39;re available. I use includes all the time. Most of the includes in the _includes directory are pulled into the theme layouts. For those includes that change, I put them inside custom and then inside a specific project folder. "
},




{
"title": "Excluding files",
"tags": "single-sourcing",
"keywords": "exclusion, separating outputs, removing files from outputs",
"url": "doc_excluding_files.html",
"summary": "By default, all the files in your Jekyll project are included in the output (this differs from DITA projects, which don't include files unless noted on the map). If you're single sourcing, you'll need to exclude the files that shouldn't be included in the output. The sidebar doesn't control inclusion or exclusion.",
"body": "About exclusionBy default, all files in your project are included in your output (regardless of whether they&#39;re listed in the sidebar_doc.yml file or not). To exclude files, note them in the exclude section in the configuration file. Here&#39;s a sample:exclude:   - doc_writers_*  - bower_components  - GemfileIf you have different outputs for your site, you&#39;ll want to customize the exclude sections in your various configuration files.Exclude strategiesHere&#39;s the process I recommend. Put all files in the root directory of your project. Suppose one project&#39;s name is alpha and the other is beta. Then name each file as follows:alpha_sample.htmlbeta_sample.htmlIn your exclude list for your beta project, specify it as follows:exclude: - alpha_*In your exclude list for your alpha project, specify it as follows:exclude:- beta_*If you have more sophisticated exclusion, add another level to your file names. For example, if you have different programming languages you want to filter by, add this:alpha_java_sample.htmlalpha_cpp_sample.htmlThen you exclude files for your Alpha C++ project as follows:exclude: - alpha_java_*- beta_*And you exclude files for your Alpha Java project as follows:exclude:- alpha_cpp_*- alpha_beta_*When you exclude folders, include the trailing slash at the end of the folder name:exclude:- images/alpha/There isn&#39;t a way to automatically exclude anything. By default, everything is included unless you explicitly list it under the exclude section.Excluding draft contentIf you&#39;re working on a draft, put it inside the _drafts folder or add published: false in the frontmatter. The _drafts folder is excluded by default, so you don&#39;t have to specify it in your exclude list. LimitationsWhat if a file should appear in two projects but not the third? This can get tricky. For some files, rather than using a wildcard, you may need to manually specify the entire filename that you&#39;re excluding instead of excluding it by way of a wildcard pattern."
},




{
"title": "Video embeds",
"tags": "formatting",
"keywords": "videos, youtube, vimeo, video js, video wrapper, mp4, stream",
"url": "doc_video_embeds.html",
"summary": "You can embed files with a Video JS wrapper by adding 'video: true' in the frontmatter. Alternatively, you can just fall back on the default video wrapper in the browser.",
"body": "About Video JSThe theme has the video.js player integrated. But the scripts only appear on a page or post if you have certain frontmatter in that page or post. If you want to embed a video in a page and use the Video JS player, add video: true in your frontmatter of a page or post, and then add code like this where you want the video to appear:&lt;p&gt;&lt;video id=&quot;scenario-1&quot; class=&quot;video-js vjs-default-skin vjs-big-play-centered&quot; controls preload=&quot;auto&quot; width=&quot;640&quot; height=&quot;480&quot; data-setup=&#39;{}&#39;&gt;  &lt;source src=&quot;http://idratherbetellingstories.com/podcasts/ontariochapterpresentation/ontariochapterv4.mp4&quot; type=&#39;video/mp4&#39;&gt;&lt;/video&gt;&lt;/p&gt;Here&#39;s an example:   If you want the player button in the upper-left corner (which is the default), remove the vjs-big-play-centered from the video class.  Here are more details on this video player from Video JS.Note that if some of the js doesn&#39;t load correctly, the default fallback player is the regular HTML5 video player available via the browser. Here&#39;s an example of the built-in browser video wrapper:  Your browser does not support the video tag.However, I don&#39;t think the built-in browser video players work very well (you can&#39;t easily scrub around the video without seeing lots of buffering and other issues). But definitely compare the two. You may find that adding the Video JS wrapper is overkill.Github wasn&#39;t designed to store video content. If you have an mp3 file, don&#39;t store it in your Github directory. Instead, put it on a web host using regular FTP methods, or stream the video from a video streaming service such as Youtube or Vimeo. Also, note that Github&#39;s Large File Storage (which does handle large files) isn&#39;t compatible with Github Pages."
},




{
"title": "Link validation",
"tags": "publishing",
"keywords": "broken links, orphan links, publishing errors, validation, link validity, hyperlink issues",
"url": "doc_link_validation.html",
"summary": "Before deploying your published site, you want to ensure that you don't have any broken links. There are a few ways to check for broken links.",
"body": "Why broken links are challenging for technical writersOne of the challenging aspects of technical writing is avoiding broken links in your output. Consider this example. You have three outputs, with different topics included for different audiences. The topics each have inline cross references pointing to the other topics, but since some of the topics aren&#39;t included for each audience, you risk having a broken link for the output that omits that topic.Additionally, technical writers frequently manage large numbers of topics, and as they make updates, they rename titles, remote some topics, combine multiple topics into the same topic, and make other edits. When you&#39;re developing content, the pages and titles in your topics and navigation are in flux. You shift things around constantly trying to find the right organization, the right titles, and more. During this time, if you have inline links that point to specific pages, how do you avoid broken links in your output?Use the title checkerThe theme has a file called title-checker.html. This file will iterate through all the pages listed in the sidebar navigation and top navigation, and compare the navigation titles against the page titles based on matching URLs. If there are inconsistencies in the titles, they get noted on the title-checker.html page. To run the link checker, just build or serve your project, and go to title-checker.html in your browser (such as Chrome). If there are inconsistencies, they will be noted on the page.Note that in order for the title-checker file to run correctly, it has to detect a match between the URL listed in the sidebar or top navigation with the URL for the page (based on the file name). If you have the wrong URL, it won&#39;t tell you if the page titles match. Therefore you should always click through all the topics in your navigation to make sure the URLs are accurate.Generate a PDFWhen you generate a PDF, Prince XML will print &quot;page 0&quot; for any cross references it can&#39;t find. This lets you know that a particular link is bad because the page is missing.If you have links in your PDF that aren&#39;t references to other topics (maybe they&#39;re links to PDF file assets, or links within a navtab or collapsible section), then you must add a class of noCrossRef to the link to avoid having Prince write &quot;page 0&quot; for the link. (Note that there are still some kinks I&#39;m working out with this. You may find that links still say &quot;page 0&quot; even if they have the noCrossRef class.)Use data references for all inline linksInstead of creating links to direct pages, use the data reference technique described in . With this method, the urls.txt file iterates through all the pages in your navigation and formats them into a YAML syntax. Then you insert an inline link by referring to that YAML data. For example, the previous hyperlink is {{site.data.urls.doc_hyperlinks.link}}. As you go through the link validation process, make sure you copy over the content from the generated urls.txt (in the Jekyll site output) and insert it into the urls.yml file in your _data folder."
},




{
"title": "Shuffle layout",
"tags": "special-layouts",
"keywords": "shuffle, card layout, dynamic grid, doc portal, support portal",
"url": "doc_shuffle.html",
"summary": "This layout shows an example of a knowledge-base style navigation system, where there is no hierarchy, just groups of pages that have certain tags.",
"body": "            All      Getting Started      Formatting      Publishing      Content types          Single Sourcing      Special Layouts                                            Getting started                                 If you're getting started with Jekyll, see the links in this section. It will take you from the beginning level to comfortableetting started with this theme                                                                                                                                                                                                                                  Troubleshooting                                                                                                  Support                                                                                                  Customizing the theme                                                                                                                                                                                                                                                                                                  About this themeebStorm Text Editor                                                                                                  Supported featuresntroductionages                                                                                                                                                                                                 Content types                            This section lists different content types and how to work with them.                                                                                                                                                                                                                                                                                                                                                                                        Collectionseriesenerating PDFs                                                                                                                                                                                                                                                                                        Help APIs and UI tooltipsages                                                                                                                                               Formatting                                 These topics get into formatting syntax, such as images and tables, that you'll use on each of your pages:                                                                                     Links                                                                                                                                                                                                                                                                                                                                                                                                  Syntax highlightingcons                                                                                                                                                                                                  Images                                                                                                                                                                  Tooltips                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Video embeds                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Alertslossary layout                                                                                                                                  Navtabs                                                                                                                                                                                                                                  Labels                                                                                                                                                                  Tables                                                                                                                                  Pages                                                                                                                                                                   Single Sourcing               These topics cover strategies for single-sourcing. Single sourcing refers to strategies for re-using the same source in different outputs for different audiences or purposesonditional logic                                                                                                  Setting configuration options                                                                                                                                  Content reuse                                                                                                  Excluding files                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Generating PDFs                                                                                                                                                                                                                                  Help APIs and UI tooltips                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Publishing               When you're building, publishing, and deploying your Jekyll site, you might find these topics helpful.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Themes                                                                                                                                                                                                                                                                  Pushing builds to server                                                                                                                                                                                                                                  iTerm profilesetting configuration options                                                                                                                                                                                                                                                                                                  Link validation                                                                                                                                                                                                                                                                                                  Search configuration                                                                                                                                                                                                                                                                                                                                                                                                  Build arguments                                                                                                                                                                                                                                                                                                                                  Generating PDFs                                                                                                                                                                                                                                  Help APIs and UI tooltipspecial Layouts                                 These pages highlight special layouts outside of the conventional page and TOC hierarchy.                                                                                                                                                                                                                                                       Knowledge-base layout                                                                                                                                                                     FAQ layoutpecial layouts overviewhuffle layout                                                                                                                                                                     Scroll layoutlossary layouthis was mostly an experiment to see if I could break away from the hierarchical TOC and provide a different way of arranging the content. However, this layout is somewhat problematic because it doesn't allow you to browse other navigation options on the side while viewing a topic."
},




{
"title": "Series demo 1.0",
"tags": "",
"keywords": "",
"url": "doc_seriesdemo1_0.html",
"summary": "This is the first post in the series.",
"body": "            Series Demo                                             This is the first post in the series.Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aliquam vel sollicitudin felis. Sed eu arcu sed ipsum semper luctus eu a tortor. Suspendisse id leo eu metus laoreet varius. Mauris consequat accumsan ex, a iaculis metus fermentum a. Praesent sit amet fermentum leo. Aliquam feugiat, nibh in ultrices mattis, felis ipsum venenatis metus, vel vehicula libero mauris a enim. Sed placerat est ac lectus vestibulum tempor. Quisque ut condimentum massa. Proin venenatis leo id urna cursus blandit. Vivamus sit amet hendrerit metus.Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aliquam vel sollicitudin felis. Sed eu arcu sed ipsum semper luctus eu a tortor. Suspendisse id leo eu metus laoreet varius. Mauris consequat accumsan ex, a iaculis metus fermentum a. Praesent sit amet fermentum leo. Aliquam feugiat, nibh in ultrices mattis, felis ipsum venenatis metus, vel vehicula libero mauris a enim. Sed placerat est ac lectus vestibulum tempor. Quisque ut condimentum massa. Proin venenatis leo id urna cursus blandit. Vivamus sit amet hendrerit metus.    "
},







{
"title": "Scroll layout",
"tags": "special-layouts",
"keywords": "json, scrolling, scrollto, jquery plugin",
"url": "doc_scroll.html",
"summary": "This page demonstrates how you the integration of a script called ScrollTo, which is used here to link definitions of a JSON code sample to a list of definitions for that particular term. The scenario here is that the JSON blocks are really long, with extensive nesting and subnesting, which makes it difficult for tables below the JSON to adequately explain the term in a usable way.",
"body": "          {  \"apples\": \"red fruit at the store\",  \"bananas\": \"yellow bananas in a bunch\",  \"carrots\": \"orange vegetables that grow in the ground\",  \"dingbats\": \"a type of character symbol on a computer\",  \"eggs\": \"chickens lay them, and people eat them\",  \"falafel\": \"a Mediterranean sandwich consisting of lots of different stuff i don't know much about\",  \"giraffe\": \"tall animal, has purple tongue\",  \"hippo\": \"surprisingly dangerous amphibian\",  \"igloo\": \"an ice shelter made by eskimos\",  \"jeep: \"the only car that starts with a j\",  \"kilt\": \"something worn by scottish people, not a dress\",  \"lamp\": \"you use it to read by your bedside at night\"  \"manifold\": \"an intake mechanism on a car, like a valve, i think\",  \"octopus\": \"eight tentacles, shoots ink, lives in dark caves, very mysterious\",  \"paranoia\": \"the constant feeling that others are out to get you, conspiring against your success\",  \"qui\": \"a life force that runs through your body\",  \"radical\": \"someone who opposes the status quo in major ways\",  \"silly\": \"how I feel writing this dummy copy\",  \"taffy\": \"the sweets children like the most and dentists hate the worst\",  \"umbrella\": \"an invention that has not had any advancements in 200 years\",  \"vampire\": \"a paranormal figure that is surprisingly in vogue despite its basic nature\",  \"washington\": \"the place where tom was born\",  \"xylophone\": \"some kind of pinging instrument used to sound chime-like notes\",  \"yahoo\": \"an expression of exuberance, said under breath when something works right\",  \"zeta\": \"the way british people pronounce z\",  \"alpha\": \"the original letter of the alphabet, which has since come to mean the first. however, i think the original symbol of alpha is actually an ox. it is somewhat of a mystery to linquists as to the exact origin of the letter alpha, but it basically represents the dawn of the alphabet, which proved to be a huge step forward for human thought and expression.\",  \"beta\": \"the period of time when something is finished but undergoing testing by a group of people.\",  \"cappa\": \"how italians refer to their baseball caps\",  \"dunno\": \"informal expression for 'don't know'\"  }              applesLorem ipsum dolor sit amet, consectetur adipiscing elit. Integer magna massa, euismod sed rutrum at, ullamcorper quis tellus. Vestibulum erat purus, aliquet sit amet pellentesque eget, tempus at ante. Nulla justo nisi, elementum nec nisi eget, consectetur varius tortor.     bananasCurabitur quis nibh sed eros viverra tempus et quis lorem. Nulla convallis sit amet risus vitae rutrum. Nulla at faucibus lectus. Pellentesque tortor nisl, interdum ac quam non, egestas congue massa. Vestibulum non porttitor lacus. Nam tincidunt arcu lectus. Donec eget ornare neque, hendrerit ornare lectus. In ac pretium odio.    carrotsVivamus pulvinar vestibulum pharetra. Vivamus vitae diam iaculis, posuere mi sed, dignissim massa. Nunc vitae aliquet urna. Proin sed pulvinar ex. Maecenas nisl lorem, rutrum sit amet hendrerit sed, posuere at odio. Sed consectetur semper tristique. Vivamus finibus varius felis at convallis. Fusce in dictum nunc.    dingbatsCurabitur feugiat lorem eget elit ullamcorper tincidunt. In euismod diam aliquet tortor fermentum tempor. Fusce quam felis, commodo viverra orci vitae, scelerisque aliquet risus.     eggsDuis est nunc, fringilla eu ligula et, varius dignissim dui. Vivamus in tellus vitae ipsum vehicula fermentum at congue tellus. Suspendisse fermentum, magna vitae aliquet sodales, tellus nisi rutrum arcu, vitae auctor dolor quam ac tellus. Cras posuere augue erat, in sagittis quam lacinia id.    falafelPraesent auctor a enim non lacinia. Integer sodales aliquet mi vel dapibus. Donec consequat justo eget nisi lacinia, eu sodales ligula molestie. Sed sapien nulla, rhoncus at elementum a,     giraffeNullam venenatis at lectus sed pharetra. Sed hendrerit ligula lectus, non pellentesque diam faucibus sit amet. Aliquam dictum hendrerit pellentesque. Cras eu nisl sagittis, faucibus velit sit amet, sagittis odio. Donec vulputate ex vitae purus    hippoCras nec pretium nulla. Suspendisse tempus tortor vel venenatis pulvinar. Integer varius tempor enim fringilla tincidunt. Phasellus magna turpis, auctor vitae elit eget, fringilla pellentesque est. Phasellus ut porta risus. Curabitur iaculis sapien sed venenatis auctor. Integer eu orci at lectus eleifend auctor id rutrum urna.    Fusce rhoncus elit sed quam laoreet placerat. Praesent lacinia metus quis felis mollis, ac facilisis risus consequat. Phasellus laoreet feugiat lacus. Etiam a neque est.     jeepNulla vitae metus rutrum, condimentum orci nec, maximus est. Aenean sit amet ante nec elit dignissim faucibus eget quis quam.     kiltMorbi maximus, erat vel rhoncus sagittis, dolor purus dignissim ante, sit amet pharetra ex justo vitae ipsum. Nulla consequat interdum neque    lampCum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Mauris aliquam dapibus blandit. Donec porta, enim hendrerit venenatis vulputate, orci diam lacinia nibh, faucibus rutrum dolor dui ut quam.    manifoldDonec finibus massa vel nisi ullamcorper, vitae ornare enim euismod. Aliquam auctor quam erat. Duis interdum rutrum orci, ac interdum urna pharetra eget.    octopusNulla id egestas enim. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse potenti. Curabitur eu lobortis ligula.    paranoiaAenean hendrerit mauris ipsum, non laoreet ipsum luctus vel. Curabitur tristique auctor elit ut pulvinar. Quisque arcu arcu, condimentum aliquam sodales nec, dignissim nec justo. Nunc tristique sem felis, pharetra euismod lorem volutpat sed. Ut porttitor metus sit amet elit rhoncus semper.    quiQuisque rhoncus cursus felis vel elementum. Vestibulum dignissim molestie tortor nec facilisis. Praesent a nibh condimentum, porta nulla egestas, auctor eros    radicalEtiam hendrerit interdum tellus, at aliquet sapien egestas in. Aenean eu urna nisl. Cras vitae risus pharetra, elementum mauris nec, auctor lectus. Fusce pellentesque venenatis dictum. Proin at augue at mauris finibus semper ultricies sed eros.    sillyPraesent pulvinar consequat posuere. Morbi egestas rhoncus felis, id fermentum metus lobortis in. Vestibulum nibh orci, euismod eget vestibulum nec, vehicula vitae tortor. Aenean ullamcorper enim nunc, eu auctor ligula auctor eget.        taffyEtiam et arcu vel lacus aliquet lobortis in in massa. Nunc non mollis elit. Aenean accumsan orci quis risus aliquam, non gravida nulla molestie. Mauris pharetra libero et magna aliquam aliquam. Integer quis luctus dolor.     umbrellaFusce molestie finibus malesuada. Nullam ac egestas quam, id venenatis ligula. Pellentesque pulvinar elit et vestibulum fringilla. Cras volutpat sed quam ornare scelerisque. Vivamus volutpat ante pretium scelerisque tempus. Etiam venenatis tempor nisl dignissim sollicitudin. Curabitur ac risus vitae dolor pretium posuere vel vitae diam. Donec in odio arcu.    vampireVestibulum pretium condimentum commodo. Integer placerat leo non ipsum ultrices, ac convallis elit varius. Vestibulum ultricies, justo eu rutrum molestie, quam arcu euismod sapien, vel gravida ipsum nulla eget erat.     washingtonNunc ac quam eu risus dictum sodales. Nam ac risus iaculis, aliquet sem eu, mollis mauris. Curabitur pretium facilisis orci ut lacinia. Sed fermentum leo a odio blandit rutrum. Phasellus at nibh vel odio interdum vulputate ac eget urna. Nam eu arcu dapibus, sodales ligula nec, volutpat ipsum. Suspendisse auctor tellus vitae libero euismod venenatis.     xylophoneSed molestie lobortis ante sit amet hendrerit. Sed pharetra nisi sed interdum pulvinar. Nunc efficitur erat non aliquam mattis. Sed id nisl mattis lacus vehicula volutpat vitae vel massa. Curabitur interdum velit odio, vitae sollicitudin nunc rutrum non.     yahooNunc commodo consectetur scelerisque. Proin fermentum ligula ac quam finibus tincidunt. Aenean venenatis nisi et semper semper. Nunc sodales velit ipsum, ac pellentesque augue placerat eu.    Nullam ac suscipit odio. Curabitur viverra arcu ut egestas sollicitudin. Fusce sodales varius lectus ut tristique. Etiam eget nunc ornare, aliquet tortor eget, consequat mauris. Integer sit amet fermentum augue.     alphaPraesent nec neque ac tellus sodales eleifend nec vel ipsum. Cras et semper risus. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Integer mattis leo nisl, a tincidunt lectus tristique eget. Donec finibus lobortis viverra. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Vivamus egestas pulvinar odio non vehicula. Morbi malesuada leo eget nisl sagittis aliquet.    Mauris a libero vel enim pharetra interdum non a quam. Sed tincidunt ut elit sed dignissim. Suspendisse vitae tellus dapibus, fermentum lacus ac, fermentum lacus. Nam ante odio, fringilla ac elementum a, mollis sed tellus.     cappaNam molestie semper nulla et molestie. Ut facilisis, ipsum sed convallis posuere, mi mauris bibendum erat, nec egestas ipsum est nec dolor.     dunnoEtiam et metus congue, commodo libero et, accumsan sem. Aliquam erat volutpat. Quisque tincidunt, tortor non blandit ullamcorper, orci mauris dignissim augue, eget vehicula nulla justo sed dolor. Nunc ac urna quis nisi maximus pharetra in a mauris. Proin metus mi, venenatis vitae tristique sed, fermentum at purus. Aliquam erat volutpat. Maecenas efficitur sodales nibh, ac hendrerit felis facilisis et. Interdum et malesuada fames ac ante ipsum primis in faucibus.       This was mostly an experiment to see if there was a better way to document a long JSON code example. I haven't actually used this approach in my own documentation."
},




{
"title": "Search configuration",
"tags": "publishingnavigation",
"keywords": "search, json, configuration, findability",
"url": "doc_search_configuration.html",
"summary": "The search feature uses JavaScript to look for keyword matches in a JSON file. The results show instant matches, but it doesn't provide a search results page like Google. Also, sometimes invalid formatting can break the JSON file.",
"body": "About searchThe search is configured through the search.json file in the root directory. Take a look at that code if you want to change what fields are included.The search is a simple search that looks at content in pages. It looks at titles, summaries, keywords, tags, and bodies.However, the search doesn&#39;t work like google &mdash; you can&#39;t hit return and see a list of results on the search results page, with the keywords in bold. Instead, this search shows a list of page titles that contain keyword matches. It&#39;s fast, but simple.Excluding pages form searchBy default, every page is included in the search. Depending on the type of content you&#39;re including, you may find that some pages will break the JSON formatting. If that happens, then the search will no longer work.If you want to exclude a page from search add search: exclude in the frontmatter.Troubleshooting searchYou should exclude any files from search that you don&#39;t want appearing in the search results. For example, if you have a tooltips.json file or prince-file-list.txt, don&#39;t include it, as the formatting will break the JSON format.If any formatting in the search.json file is invalid (in the build), search won&#39;t work. You&#39;ll know that search isn&#39;t working if no results appear when you start typing in the search box.If this happens, go directly to the search.json file in your browser, and then copy the content. Go to a JSON validator and paste in the content. Look for the line causing trouble. Edit the file to either exclude it from search or fix the syntax so that it doesn&#39;t invalidate the JSON. The search.json file already tries to strip out content that would otherwise make the JSON invalid:      &quot;body&quot;: &quot;{{ page.content | strip_html | strip_newlines | replace: &#39;\\&#39;, &#39;\\\\\\\\&#39; | replace: &#39;&quot;&#39;, &#39;\\\\&quot;&#39; | replace: &#39;    &#39;, &#39;    &#39;  }}&quot;,Note that the last replace, | replace: &#39;    &#39;, &#39;    &#39;, looks for any tab character and replaces it with four spaces. Yes, an innocent little tab character invalidates JSON. Geez. If you run into other problematic formatting, you can use regex expressions to find and replace the content. See Regular Expressions for details on finding and replacing code.It&#39;s possible that the formatting may not account for all the scenarios that would invalidate the JSON. (Sometimes it&#39;s an extra comma after the last item that makes it invalid.)Customizing search resultsAt some point, you may want to customize the search results more. Here&#39;s a little more detail that will be helpful. The search.json file retrieves various page values:    {% if page.search == true %}      {      &quot;title&quot;: &quot;{{ page.title | escape }}&quot;,      &quot;tags&quot;: &quot;{{ page.tags }}&quot;,      &quot;keywords&quot;: &quot;{{page.keywords}}&quot;,      &quot;url&quot;: &quot;{{ page.url | replace: &quot;/&quot;, &quot;&quot; }}&quot;,      &quot;last_updated&quot;: &quot;{{ page.last_updated }}&quot;,      &quot;summary&quot;: &quot;{{page.summary}}&quot;,      &quot;body&quot;: &quot;{{ page.content | strip_html | strip_newlines | replace: &#39;\\&#39;, &#39;\\\\\\\\&#39; | replace: &#39;&quot;&#39;, &#39;\\\\&quot;&#39; }}&quot;      }The _includes/topnav.html file then makes use of these values:&lt;!-- start search --&gt;&lt;div id=&quot;search-demo-container&quot;&gt;&lt;input type=&quot;text&quot; id=&quot;search-input&quot; placeholder=&quot;&quot;&gt;&lt;ul id=&quot;results-container&quot;&gt;&lt;/ul&gt;&lt;/div&gt;&lt;script src=&quot;js/jekyll-search.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot;&gt;SimpleJekyllSearch.init({searchInput: document.getElementById(&#39;search-input&#39;),resultsContainer: document.getElementById(&#39;results-container&#39;),dataSource: &#39;search.json&#39;,searchResultTemplate: &#39;&lt;li&gt;&lt;a href=&quot;{url}&quot; title=&quot;Search configuration&quot;&gt;{title}&lt;/a&gt;&lt;/li&gt;&#39;,noResultsText: &#39;&#39;,limit: 10,fuzzy: true,})&lt;/script&gt;&lt;!-- end search --&gt;&lt;/li&gt;Where you see {url} and {title}, the search is retrieving the values for these as specified in the search.json file. At some point, you may want to add in the {summary} as well. You could create a dedicated search page that could include the summary as an instant result as you type. "
},




{
"title": "WebStorm Text Editor",
"tags": "getting-started",
"keywords": "webstorm, sublime, markdown, atom, gnome, notepad ++, textpad, bbedit",
"url": "doc_webstorm_text_editor.html",
"summary": "You can use a variety of text editors when working with a Jekyll project. WebStorm from IntelliJ offers a lot of project-specific features, such as find and replace, that make it ideal for working with tech comm projects.",
"body": "About text editors and WebStormThere are a variety of text editors available, but I like WebStorm the best because it groups files into projects, which makes it easy to find all instances of a text string, to do find and replace operations across the project, and more.If you decide to use WebStorm, here are a few tips on configuring the editor.Remove unnecessary pluginsBy default, WebStorm comes packaged with a lot more functionality than you probably need. You can lighten the editor by removing some of the plugins. Go to WebStorm &gt; Preferences &gt; Plugins and clear the check boxes of plugins you don&#39;t need.Add the Markdown Support pluginSince you&#39;ll be writing in Markdown, having color coding and other support for Markdown is key. Install the Markdown Support plugin by going to WebStorm &gt; Preferences &gt; Plugins and clicking Install JetBrains Plugin. Search for Markdown Support.Learn a few key commandsCommandShortcutsShift + ShiftAllows you to find a file by searching for its name.Shift + Command + FFind in whole project. (WebStorm uses the term &quot;Find in path&quot;.)Shift + Command + RReplace in whole project. (Again, WebStorm calls it &quot;Replace in path.&quot;)Command + FFind on pageShift + RReplace on pageRight-click &gt; Add to FavoritesAllows you to add files to a Favorites section, which expands below the list of files in the project pane.Shift + tabApplies outdenting (opposite of tabbing)Shift + Function + F6Rename a fileCommand + DeleteDelete a fileCommand + 2Show Favorites paneShift + Option + FAdd to FavoritesIf these shortcut keys aren&#39;t working for you, make sure you have the &quot;Max OS X 10.5+&quot; keymap selected. Go to WebStorm &gt; Preferences &gt; Keymap and select it there. Identifying changed filesWhen you have the Git and Github integration, changed files appear in blue. This lets you know what needs to be committed to your repository.Creating file templatesRather than insert the frontmatter by hand each time, it&#39;s much faster to simply create a Jekyll template. To create a Jekyll template in WebStorm:Right-click a file in the list of project files, and select New &gt; Edit File Templates.If you don&#39;t see the Edit File Templates option, you may need to create a file template first. Go to File &gt; Default Settings &gt; Editor &gt; File and Code Templates. Create a new file template with an md extension, and then close and restart WebStorm. Then repeat this step and you will see the File Templates option appear in the right context menu.In the upper-left corner of the dialog box that appears, click the + button to create a new template.Name it something like Jekyll page. Insert the frontmatter you want, and save it.To use the Jekyll template, when you create a new file in your WebStorm project, you can select your Jekyll file template.Disable pair quotesBy default, each time you type &#39;, WebStorm will pair the quote (creating two quotes). You can disable this by going to WebStorm &gt; Preferences &gt; Editor &gt; Smartkeys. Clear the Insert pair quotes check box."
},




{
"title": "Supported features",
"tags": "getting-started",
"keywords": "features, capabilities, scalability, multichannel output, dita, hats, comparison, benefits",
"url": "doc_supported_features.html",
"summary": "If you're not sure whether Jekyll and this theme will support your requirements, this list provides a semi-comprehensive overview of available features.",
"body": "Before you get into exploring Jekyll as a potential platform for help content, you may be wondering if it supports some basic features. The following table shows what is supported in Jekyll and this theme.FeaturesSupportedNotesContent re-useYesSupports re-use through Liquid. You can re-use variables, snippets of code, entire pages, and more. In DITA speak, this includes conref and keyref.MarkdownYesYou can author content using Markdown syntax. This is a wiki-like syntax for HTML that you can probably pick up in 10 minutes. Where Markdown falls short, you can use HTML. Where HTML falls short, you use Liquid, which is a scripting that allows you to incorporate more advanced logic.Responsive designYesUses Bootstrap framework.TranslationYesI haven&#39;t done a translation project yet (just a pilot test). Here&#39;s the basic approach: Export the pages and send them to a translation agency. Then create a new project for that language and insert the translated pages. Everything will be translated.PDFYesYou can generate PDFs from your Jekyll site. This theme uses Prince XML (costs $495) to do the PDF conversion task. You basically set up a page that uses Liquid logic to get all the pages you want, and then you use PrinceXML (not part of Jekyll) to convert that page into a PDF.CollaborationYesYou collaborate with Jekyll projects the same way that developers collaborate with software projects. (You don&#39;t need a CMS.) Because you&#39;re working with text file formats, you can use any version control software (Git, Mercurial, Perforce, Bitbucket, etc.) as a CMS for your files.ScalabilityYesYour site can scale to any size. It&#39;s up to you to determine how you will design the information architecture for your thousands of pages. You can choose what you display at first, second, third, fourth, and more levels, etc. Note that when your project has thousands of pages, the build time will be longer (maybe 1 minute per thousand pages?). It really depends on how many for loops you have iterating through the pages.Lightweight architectureYesYou don&#39;t need a LAMP stack (Linux, Apache, MySQL, PHP) architecture to get your site running. All of the building is done on your own machine, and you then push the static HTML files onto a server.Multichannel outputYesThis term can mean a number of things, but let&#39;s say you have 10 different sites you want to generate from the same source. Maybe you have 7 different versions of your product, and 3 different locations. You can assemble your Jekyll site with various configurations, variants, and more. Jekyll actually does all of this quite well. Just specify a different config file for each unique build.SkinnabilityYesYou can skin your Jekyll site to look identical to pretty much any other site online. If you have a UX team, they can really skin and design the site using all the tools familiar to the modern designer -- JavaScript, HTML5, CSS, jQuery, and more. Jekyll is built on the modern web development stack rather than the XML stack (XSLT, XPath, XQuery).SupportYesThe community for your Jekyll site isn&#39;t so much other tech writers (as is the case with DITA) but rather the wider web development community. Jekyll Talk is a great resource. So is Stack Overflow.Blogging featuresNoThis theme just uses pages, not posts. I may integrate in post features in the future, but the theme really wasn&#39;t designed with posts in mind. If you want a post version of the site, you can clone my blog theme, which is highly similar in that it&#39;s based on Bootstrap, but it uses posts to drive most of the features. I wanted to keep the project files simple.CMS interfaceNoUnlike with WordPress, you don&#39;t log into an interface and navigate to your files. You work with text files and preview the site dynamically in your browser. Don&#39;t worry -- this is part of the simplicy that makes Jekyll awesome. I recommend using WebStorm as your text editor.WYSIWYG interfaceNo, but ...As noted in the previous point, I use WebStorm to author content, because I like working in text file formats. But you can use any Markdown editor you want (e.g., Lightpaper for Mac, Marked) to author your content.VersioningYes, but...Jekyll doesn&#39;t version your files. You upload your files to a version control system such as Git. Your files are versioned there.PC platformYes, but ...Jekyll isn&#39;t officially supported on Windows, and since I&#39;m on a Mac, I haven&#39;t tried using Jekyll on Windows. See this page in Jekyllrb help for details about installing and running Jekyll on a Windows machine. A couple of Windows users who have contacted me have been unsuccessful in installing Jekyll on Windows, so beware. In the configuration files, use rouge instead of pygments (which is Python-based) to avoid conflicts.jQuery pluginsYesYou can use any jQuery plugins you and other JavaScript, CMS, or templating tools. However, note that if you use Ruby plugins, you can&#39;t directly host the source files on Github Pages because Github Pages doesn&#39;t allow Ruby plugins. Instead, you can just push your output to any web server. If you&#39;re not planning to use Github Pages, there are no restrictions on any plugins of any sort. Jekyll makes it super easy to integrate every kind of plugin imaginable. This theme doesn&#39;t actually use any plugins, so you can publish on Github if you want.Bootstrap integrationYesThis theme is built on Bootstrap. If you don&#39;t know what Bootstrap is, basically this means there are hundreds of pre-built components, styles, and other elements that you can simply drop into your site. For example, the responsive quality of the site comes about from the Bootstrap code base.Fast-loading pagesYesThis is one of the Jekyll&#39;s strengths. Because the files are static, they loading extremely fast, approximately 0.5 seconds per page. You can&#39;t beat this for performance. (A typically database-driven site like WordPress averages about 2.5 + seconds loading time per page.) Because the pages are all static, it means they are also extremely secure. You won&#39;t get hacked like you might with a WordPress site.Relative linksYesThis theme is built entirely with relative links, which means you can easily move the files from one folder to the next and it will still display. You don&#39;t need to view the site on a web server either -- you can view it locally just clicking the files. This relative link structure facilitates scenarios where you need to archive versions of content or move the files from one directory (a test directory) to another (such as a production directory).ThemesYesYou can have different themes for different outputs. If you know CSS, theming both the web and print outputs is pretty easy.Open sourceYesThis theme is entirely open source. Every piece of code is open, viewable, and editable. Note that this openness comes at a price &mdash; it&#39;s easy to make changes that break the theme or otherwise cause errors."
},




{
"title": "Series demo 1.3",
"tags": "",
"keywords": "",
"url": "doc_seriesdemo1_3.html",
"summary": "This is the fourth post in the series.",
"body": "            Series Demo                                             This is the fourth post in the series.Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aliquam vel sollicitudin felis. Sed eu arcu sed ipsum semper luctus eu a tortor. Suspendisse id leo eu metus laoreet varius. Mauris consequat accumsan ex, a iaculis metus fermentum a. Praesent sit amet fermentum leo. Aliquam feugiat, nibh in ultrices mattis, felis ipsum venenatis metus, vel vehicula libero mauris a enim. Sed placerat est ac lectus vestibulum tempor. Quisque ut condimentum massa. Proin venenatis leo id urna cursus blandit. Vivamus sit amet hendrerit metus.Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aliquam vel sollicitudin felis. Sed eu arcu sed ipsum semper luctus eu a tortor. Suspendisse id leo eu metus laoreet varius. Mauris consequat accumsan ex, a iaculis metus fermentum a. Praesent sit amet fermentum leo. Aliquam feugiat, nibh in ultrices mattis, felis ipsum venenatis metus, vel vehicula libero mauris a enim. Sed placerat est ac lectus vestibulum tempor. Quisque ut condimentum massa. Proin venenatis leo id urna cursus blandit. Vivamus sit amet hendrerit metus.Mauris consequat accumsan ex, a iaculis metus fermentum a. Praesent sit amet fermentum leo. Aliquam feugiat, nibh in ultrices mattis, felis ipsum venenatis metus, vel vehicula libero mauris a enim. Sed placerat est ac lectus vestibulum tempor. Quisque ut condimentum massa. Proin venenatis leo id urna cursus blandit. Vivamus sit amet hendrerit metus.Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aliquam vel sollicitudin felis. Sed eu arcu sed ipsum semper luctus eu a tortor. Suspendisse id leo eu metus laoreet varius.     "
},




{
"title": "Top navigation",
"tags": "navigation",
"keywords": "bootstrap, lists, drop-down, drop down navigation, top nav bar, topnav",
"url": "doc_top_navigation.html",
"summary": "The top navigation provides either single links or a drop-down menu. There are some other features, such as a feedback email, custom menu, and popout link.",
"body": "Changing the top navigationThe top navigation reads from the _data/topnav_doc.yml file. There are two separate sections:topnavtopnav_dropdownsItems in the topnav section are rendered as single links. In contrast, items in the topnav_dropdowns section are rendered as a drop-down menu.The Feedback emailIf you click the Feedback link, it inserts the link to the current page along with a subject header and body. The topnav.html file contains an include to feedback.html. This file contains the JavaScript that gets the current page URL and inserts it into the message body.You configure the email in the configuration file with this property: site.feedback_email.Custom MenuIt&#39;s common to publish multiple sites. If you want to link them together, you could simply list links to the other doc sites in a drop-down menu configured in the topnav_dropdowns section in the topnav_doc.yml file. However, suppose you want to do something more fancy.Included in the topnav.html file is an include to /doc/customMenu.html. The code in customMenu.html is as follows:&lt;li &gt;&lt;a href=&quot; ../doc_writers/doc_top_navigation.html&quot;&gt;Writer docs&lt;/a&gt;&lt;/li&gt;&lt;li class=&quot;dropdownActive&quot;&gt;&lt;a href=&quot; ../doc_designers/doc_top_navigation.html&quot;&gt;Designer docs&lt;/a&gt;&lt;/li&gt;In the theme, the link to the customMenu.html include in the _includes/topnav.html file is currently commented out. This is because this feature only works when you have multiple outputs hosted on the same server. Github Pages, where I&#39;m publishing this theme,  allows only one output per Github Pages directory. So rather than removing this customMenu feature from the theme, I&#39;ve just commented it out so that it won&#39;t appear broken in the demo.The current doc site is highlighted. If you select another doc site, the site switches to that doc site and goes to the same page on that doc site. This way, if you have a task such as &quot;Configuring the license&quot; in several different programming languages, users can switch to other programming languages to see the same page.You need to have both the designers and writers sites deployed on a web server to see this in action. Once deployed, browse to any page in the navigation. Then go to the Custom Menu and select the Writers site. You&#39;ll go to the exact same page but on the Writers site.If your current page doesn&#39;t have an equivalent in your other outputs, then put this in the frontmatter of the page:switch: falseThis Custom Menu may not be something you want, and if so, just remove the include from the sidebar.html file. But if you&#39;re outputting multiple sites, it may be something valuable.Pop-out linkThe top navigation bar also has an include to frameescape.html. If the site is embedded inside a frame, a link on the top navigation bar appears that says Pop-out, and it will open the site in a new window. In most cases, you&#39;ll want to simply remove this include. I added this because some of my doc sites are delivered through a Salesforce Community and are embedded inside another page in a small area. This pop-out link is a way of liberating the site from these embedded page scenarios. If your site isn&#39;t embedded in an iframe, the Pop-out link is removed."
},







{
"title": "Build arguments",
"tags": "publishing",
"keywords": "building, serving, serve, build",
"url": "doc_build_arguments.html",
"summary": "When you have a single sourcing project, you use more advanced arguments when you're building or serving your Jekyll sites. These arguments specify a particular configuration file and may build on other configuration files.",
"body": "## How to build Jekyll sitesThe normal way to build the Jekyll site is through the build command:```jekyll build```To build the site and view it in a live server so that Jekyll rebuilds that site each time you make a change, use the `serve` command:```jekyll serve```By default, the _config.yml in the root directory will be used, Jekyll will scan the current directory for files, and the folder `_site` will be used as the output. You can customize these build commands like this:```jekyll serve --config configs/config_writers.yml --destination /users/tjohnson/projects/documentation-theme-jekyll-builds/writer```Here the `configs/config_writers.yml` file is used instead of `_config.yml`. The destination directory is `../doc_writers`.## Shortcuts for the build argumentsIf you don't want to enter the long Jekyll argument every time, with all your configuration details, you can create a shell script and then just run the script. This theme shows an example with the doc_multibuild_web.sh file in the root directory.My preference is to add the scripts to profiles in iTerm. See {{site.data.urls.doc_iterm_profiles.link}} for more details.## Stop a serverWhen you're done with the preview server, press **Ctrl+C** to exit out of it. If you exit iTerm or Terminal without shutting down the server, the next time you build your site, or if you build multiple sites with the same port, you may get a server-already-in-use message.You can kill the server process using these commands:```ps aux | grep jekyll```Find the PID (for example, it  looks like \"22298\").Then type `kill -9 22298` where \"22298\" is the PID.To kill all Jekyll instances, use this:```kill -9 $(ps aux | grep '[j]ekyll' | awk '{print $2}')```I created a profile in iTerm that stores this command. Here's what the iTerm settings look like:![iTerm profile settings to kill all Jekyll](images/killalljekyll.png)"
},







{
"title": "Alerts",
"tags": "formatting",
"keywords": "notes, tips, cautions, warnings, admonitions",
"url": "doc_alerts.html",
"summary": "You can insert notes, tips, warnings, and important alerts in your content. These notes are stored as shortcodes made available through the linksrefs.hmtl include.",
"body": "{% comment %} comment 4 by saphira {% endcomment %}## About alertsAlerts are little warnings, info, or other messages that you have called out in special formatting. In order to use these alerts or callouts, just reference the appropriate value stored in the alerts.yml file as described in the following sections.## AlertsYou can insert an alert by using any of the following code.{%raw%}alert | code------|---------note | {{site.data.alerts.note}} your note {{site.data.alerts.end}}  tip | {{site.data.alerts.tip}} your tip {{site.data.alerts.end}} warning | {{site.data.alerts.warning}} your warning {{site.data.alerts.end}}important | {{site.data.alerts.important}} your important info {{site.data.alerts.end}} {%endraw%}The following demonstrate the formatting associated with each alert.{{site.data.alerts.tip}} Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. {{site.data.alerts.end}}{{site.data.alerts.note}} Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. {{site.data.alerts.end}}{{site.data.alerts.important}} Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. {{site.data.alerts.end}}{{site.data.alerts.warning}} Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. {{site.data.alerts.end}}## CalloutsIn contrast to the alerts, the callouts don't have a pre-coded bold-formatted preface such as note or tip. You just add one (if desired) in the callout text itself.{%raw%}callout | code------|---------callout_default | {{site.data.alerts.callout_default}} your callout_default content  {{site.data.alerts.end}}  callout_primary | {{site.data.alerts.callout_primary}} your callout_primary content {{site.data.alerts.end}} callout_success | {{site.data.alerts.callout_success}} your callout_success content {{site.data.alerts.end}}callout_warning | {{site.data.alerts.callout_warning}} your callout_warning content {{site.data.alerts.end}} callout_info | {{site.data.alerts.callout_info}} your callout_info content {{site.data.alerts.end}} {%endraw%}The following demonstrate the formatting for each callout. {{site.data.alerts.callout_danger}}callout_danger: Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.  {{site.data.alerts.end}}{{site.data.alerts.callout_default}}callout_default: Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.  {{site.data.alerts.end}}{{site.data.alerts.callout_primary}}calloutprimary: Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.  {{site.data.alerts.end}}{{site.data.alerts.callout_success}}calloutsuccess: Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.  {{site.data.alerts.end}}{{site.data.alerts.callout_info}}calloutinfo: Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.  {{site.data.alerts.end}}{{site.data.alerts.callout_warning}}calloutwarning: Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.  {{site.data.alerts.end}}## Blast a warning to usersIf you want to blast a warning to users on every page, add the alert or callout to the layouts/page.html page right below the frontmatter. Every page using the page layout (all, by defaut) will show this message.## Using Markdown inside of notesYou can't use Markdown formatting inside alerts. This is because the alerts leverage HTML, and you can't use Markdown inside of HTML tags."
},







{
"title": "Tag archives overview",
"tags": "navigation",
"keywords": "archives, tagging",
"url": "tag_archives_overview.html",
"summary": "This is an overview to the tag archives section. Really the only reason this section is listed explicitly in the TOC here is to demonstrate how to add a third-level to the navigation.",
"body": "## Reasons for tagsTags provide alternate groupings for your content. In the documentation for this theme, there are a number of equally plausible ways I could have grouped the content. The folder names and items I chose for each item could have been grouped in other ways with good reason.Tags allow you to go beyond the traditional hierarchical classification and provide other groupings. For example, the same item can belong to two different groups. You can also introduce other dimensions not used in your table of contents, such as platform-specific tags or audience-specific tags."
},




{
"title": "Series demo 1.2",
"tags": "",
"keywords": "",
"url": "doc_seriesdemo1_2.html",
"summary": "This is the third post in the series.",
"body": "{% include custom/doc/series_acme.html %}This is the third post in the series.Mauris consequat accumsan ex, a iaculis metus fermentum a. Praesent sit amet fermentum leo. Aliquam feugiat, nibh in ultrices mattis, felis ipsum venenatis metus, vel vehicula libero mauris a enim. Sed placerat est ac lectus vestibulum tempor. Quisque ut condimentum massa. Proin venenatis leo id urna cursus blandit. Vivamus sit amet hendrerit metus.Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aliquam vel sollicitudin felis. Sed eu arcu sed ipsum semper luctus eu a tortor. Suspendisse id leo eu metus laoreet varius. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aliquam vel sollicitudin felis. Sed eu arcu sed ipsum semper luctus eu a tortor. Suspendisse id leo eu metus laoreet varius. Mauris consequat accumsan ex, a iaculis metus fermentum a. Praesent sit amet fermentum leo. Aliquam feugiat, nibh in ultrices mattis, felis ipsum venenatis metus, vel vehicula libero mauris a enim. Sed placerat est ac lectus vestibulum tempor. Quisque ut condimentum massa. Proin venenatis leo id urna cursus blandit. Vivamus sit amet hendrerit metus.{% include custom/doc/series_acme_next.html %}"
},




{
"title": "Generating PDFs",
"tags": "publishingsingle-sourcingcontent-types",
"keywords": "PDF, prince, prince XML, ant, xsl fo",
"url": "doc_generating_pdfs.html",
"summary": "You can generate a PDF from your Jekyll project. You do this by creating a web version of your project that is printer friendly. You then use utility called Prince to iterate through the pages and create a PDF from them. It works quite well and gives you complete control to customize the PDF output through CSS, including page directives and dynamic tags from Prince.",
"body": "## PDF overviewThis process for creating a PDF relies on Prince XML to transform the HTML content into PDF. Prince costs about $500 per license. That might seem like a lot, but if you're creating a PDF, you're probably working for a company that sells a product, so you likely have access to some resources.The basic approach is to generate a list of all pages that need to be added to the PDF, and then add leverage Prince to package them up into a PDF.It may seem like the setup is somewhat cumbersome, but it doesn't take long. Once you set it up, building a pdf is just a matter of running a couple of commands.Also, creating a PDF this way gives you a lot more control and customization capabilities than with other methods for creating PDFs. If you know CSS, you can entirely customize the output.## DemoYou can see an example of the finished product here: {% if site.audience == \"designers\" %} Designers PDF Download{% endif %}{% if site.audience == \"writers\" %} Writers PDF Download{% endif %}## 1. Set up PrinceDownload and install [Prince](http://www.princexml.com/doc/installing/).You can install a fully functional trial version. The only difference is that the title page will have a small Prince PDF watermark.## 2. Create a new configuration file for each of your PDF targetsThe PDF configuration file will build on the settings in the regular configuration file but will some additional fields. Here's the configuration file for the config_designers.yml file for this theme:```destination: ../doc_designers-pdfurl: \"http://127.0.0.1:4002\"baseurl: \"/doc_designers\"port: 4002print: trueprint_title: Jekyll Documentation Theme for Designersprint_subtitle: version 3.0defaults:  -    scope:      path: \"\"      type: \"pages\"    values:      layout: \"page_print\"      comments: true      search: true```{{site.data.alerts.note}} Although you're creating a PDF, you must still build a web target before running Prince. Prince will pull from the HTML files and from the file-list for the TOC. Prince won't be able to find files if they simply have relative paths, such as /sample.html. The must have full URLs it can access &mdash; hence the url and baseurl. {{site.data.alerts.end}}Unlike the other configuration files, the PDF configuration files require a `url` and `baseurl`. This is because the Prince utility needs to access the pages in a specific place. While you could probably set up locations via absolute paths to file folders, it's easier just to provide the locations here as `url` and `baseurl`.Also note that the default page layout is `page_print`. This layout strips out all the sections that shouldn't appear in the print PDF, such as the sidebar and top navigation bar.Finally, note that there's a `print: true` toggle in case you want to make some of your content unique to PDF output. For example, you could add conditional logic that checks whether `site.print` is true or not. If it's true, then include information only for the PDF, and so on. In the configuration file, customize the values for the `print_title` and `print_subtitle` that you want. These will appear on the title page of the PDF.     ## 3. Make sure your sidebar_doc.yml file has a titlepage.html and tocpage.htmlThere are two template pages in the root directory that are critical to the PDF:* titlepage.html* tocpage.htmlThese pages should appear in your sidebar YML file (in this theme, sidebar_doc.yml):```jsonentries: - title: Sidebar   subcategories:     - title: Frontmatter       audience: writers, designers       platform: all       product: all       version: all       web: false       items:         - title: Title Page           url: /titlepage.html           audience: writers, designers           platform: all           product: all           version: all           web: false          - title: Table of Contents           url: /tocpage.html           audience: writers, designers           platform: all           product: all           version: all           web: false```Leave these pages here in your sidebar. (The `web: false` property means they won't appear in your online TOC because the conditional logic of the sidebar.html checks whether `web` is equal to `false` or not before including the item in the web version of the content.)The code in the tocpage.html is nearly identical to that of the sidebar.html page except that it includes the `site` and `baseurl` for the URLs. This is essential for Prince to create the page numbers correctly with cross references.There's another file (in the root directory of the theme) that is critical to the PDF generation process: prince-file-list.txt. This file simply iterates through the items in your sidebar and creates a list of links. Prince will consume the list of links from prince-file-list.txt and create a running PDF that contains all of the pages listed, with appropriate cross references and styling for them all.{{site.data.alerts.note}} If you have any files that you do not want to appear in the PDF, add print: false in the list of attributes in your sidebar. The prince-file-list.txt file that loops through the sidebar_doc.yml file to grab the URLs of each page that should appear in the PDF will skip over any items that have print: false in the item attributes. For example, you might not want your tag archives to appear in the PDF, but you probably will want to list them in the online help navigation. {{site.data.alerts.end}}## 4. Customize your headers and footersOpen up the css/printstyles.css file and customize what you want for the headers and footers. At the very least, customize the email address that appears in the bottom left.{% if site.audience == \"designers\" %}Exactly how the print styling works here is pretty cool. You don't need to understand the rest of the content in this section unless you want to customize your PDFs to look different from what I've configured. This style creates a page reference for a link:```cssa[href]::after {    content: \" (page \" target-counter(attr(href), page) \")\"}```You don't want cross references for any link, so this style specifies that the content after should be blank:```cssa[href*=\"mailto\"]::after, a[data-toggle=\"tooltip\"]::after, a[href].noCrossRef::after {    content: \"\";}```{{site.data.alerts.tip}} If you have a link to a file download, or some other link that shouldn't have a cross reference (such as link used in JavaScript for navtabs or collapsible sections, for example, add `noCrossRef` as a class to the link to avoid having it say \"page 0\" in the cross reference.{{site.data.alerts.end}}This style specifies that after links to web resources, the URL should be inserted instead of the page number: ```cssa[href^=\"http:\"]::after, a[href^=\"https:\"]::after {    content: \" (\" attr(href) \")\";}```This style sets your page margins:```css@page {    margin: 60pt 90pt 60pt 90pt;    font-family: sans-serif;    font-style:none;    color: gray;}```To set a specific style property for a particular page, you have to name the page. This allows Prince to identify the page. First you add frontmatter to the page that specifies the type. For the titlepage.html, here's the frontmatter:```---type: title---```For the tocpage, here's the frontmatter:```---type: frontmatter---```For the index.html page, we have this type tag (among others):```---type: first_page---```The default_print.html layout will change the class of the `body` element based on the type value in the page's frontmatter:```liquid{% raw %}{% endraw %}```Now in the css/printstyles.css file, you can assign a page name based on a specific class:```cssbody.title { page: title }```This means that for content inside of `body class=\"title\"`, we can style this page in our stylesheet using `@page title`.Here's how that title page is styled: ```css@page title {    @top-left {        content: \" \";    }    @top-right {        content: \" \"    }    @bottom-right {        content: \" \";    }    @bottom-left {        content: \" \";    }}```As you can see, we don't have any header or footer content, because it's the title page.For the tocpage.html, which has the `type: frontmatter`, this is specified in the stylesheet: ```cssbody.frontmatter { page: frontmatter }body.frontmatter {counter-reset: page 1}@page frontmatter {    @top-left {        content: prince-script(guideName);    }    @top-right {        content: prince-script(datestamp);    }    @bottom-right {        content: counter(page, lower-roman);    }    @bottom-left {        content: \"youremail@domain.com\";   }}```We reset the page count to 1 so that the title page doesn't start the count. Then we also add some header and footer info. The page numbers start counting in lower-roman numerals.Finally, for the first page, we restart the counting to 1 again and this time use regular numbers. ```cssbody.first_page {counter-reset: page 1}h1 { string-set: doctitle content() }@page {    @top-left {        content: string(doctitle);        font-size: 11px;        font-style: italic;    }    @top-right {        content: prince-script(datestamp);        font-size: 11px;    }    @bottom-right {        content: \"Page \" counter(page);        font-size: 11px;    }    @bottom-left {        content: prince-script(guideName);        font-size: 11px;    }}```You'll see some other items in there such as `prince-script`. This means we're using JavaScript to run some functions to dynamically generate that content. These JavaScript functions are located in the \\_includes/head_print.html:```js```There are a couple of Prince functions that are default functions from Prince. This gets the heading title of the page:```js        content: string(doctitle);```This gets the current page: ```js        content: \"Page \" counter(page);```Because the theme uses JavaScript in the CSS, you have to add the `--javascript` tag in the Prince command (detailed later on this page).{% endif %}## 5. Customize the doc_multiserve_pdf.sh scriptOpen the doc_multiserve_pdf.sh file in the root directory and customize it for your specific configuration files. ```echo 'Killing all Jekyll instances'kill -9 $(ps aux | grep '[j]ekyll' | awk '{print $2}')clear# serve all di print deliverables# Writersecho \"Serving Writers PDF\"jekyll serve --detach --config configs/config_writers.yml,configs/config_writers_pdf.yml# Designersecho \"Serving Designers PDF\"jekyll serve --detach --config configs/config_designers.yml,configs/config_designers_pdf.yml```Note that the first part kills all Jekyll instances. This way you won't try to server Jekyll at a port that is already occupied.The `jekyll serve` command serves up the PDF configurations for our two projects. This web version is where Prince will go to get its content.## 6. Configure the Prince scriptsOpen up doc_multibuild_pdf.sh and look at the Prince commands:```prince --javascript --input-list=../doc_designers-pdf/prince-file-list.txt -o /Users/tjohnson/projects/documentation-theme-jekyll/doc_designers_pdf.pdf;```This script issues a command to the Prince utility. JavaScript is enabled (`--javascript`), and we tell it exactly where to find the list of files (`--input-list`) &mdash; just point to the prince-file-list.txt file. Then we tell it where and what to output (`-o`).Make sure that the path to the prince-file-list.txt is correct. For the output directory, I like to output the PDF file into my project's source. Then when I build the web output, the PDF is included and something I can refer to.## 7. Add a download button for the PDFYou can add a download button for your PDF using some Bootstrap button code:```html Designers PDF Download```Here's what that looks like:{% if site.audience == \"designers\" %} Designers PDF Download{% endif %}{% if site.audience == \"writers\" %} Writers PDF Download{% endif %}## 8. Run the scriptsTo generate the PDF, you just run several scripts that have the commands packaged up:1. First run doc_multiserve_pdf.sh to serve up the PDF sites. The commands will detach the site from the preview server so that you can serve up multiple Jekyll sites in the same command terminal.2. Then run doc_multibuild_pdf.sh to build the PDF files. 3. Now run doc_multibuild_web.sh to build the web version that includes the generated PDF files.{{site.data.alerts.note}} If you don't like the style of the PDFs, just adjust the styles in the printstyles.css file.{{site.data.alerts.end}}## JavaScript conflictsIf you have JavaScript on any of your pages, Prince will note errors in Terminal like this:```error: TypeError: value is not an object```However, the PDF will still build.You need to conditionalize out any JavaScript from your PDF web output before building your PDFs. Make sure that the PDF configuration files have the `print: true` property.Then surround the JavaScript with conditional tags like this:```{% raw %}{% unless site.print == true %}javascript content here ...{% endunless %}{% endraw %}```For more detail about using `unless` in conditional logic, see {{site.data.urls.doc_conditional_logic.link}}. What this code means is basically the opposite of `{% raw %}if site.print == true {% endraw %}`."
},




{
"title": "Introduction",
"tags": "getting-started",
"keywords": "",
"url": "index.html",
"summary": "",
"body": "## Overview This site provides documentation, training, and other notes for the Jekyll Documentation theme. There's a lot of information about how to do a variety of things here, and it's not all unique to this theme. But by and large, understanding how to do things in Jekyll depends on how your theme is coded. ## Survey of featuresSome of the more prominent features of this theme include the following:* Bootstrap framework* Sidebar with page hierarchy and advanced toc* PDF generation (with Prince XML utility)* Notes, tips, and warning information notes* Tags* Single sourced outputs* Emphasis on pages, not posts* Relative (rather than absolute) link structureI'm using this theme for my documentation projects, building about 15 different outputs for various products, versions, languages, and audiences from the same set of files. This single sourcing requirement has influenced how I constructed this theme.For more discussion about the available features, see {{site.data.urls_d.doc_supported_features.link}}.## Getting startedTo get started, see these three topics:1. {{site.data.urls.doc_getting_started.link}}2. {{site.data.urls.doc_configuration_settings.link}}3. {{site.data.urls.doc_customizing_the_theme.link}}## PDF Download If you would like to download this help file as a PDF, you can do so here. The PDF most of the same content as the online help, except that some elements (such as video or special layouts) don't translate the the print medium, so they're excluded. PDF DownloadThe PDF contains a timestamp in the header indicating when it was last generated. If you download a PDF, keep in mind that it may go out of date quickly. Always compare your PDF timestamp against the online help timestamp (which you can find in the footer)."
},




{
"title": "Help APIs and UI tooltips",
"tags": "publishingsingle-sourcingcontent-types",
"keywords": "API, content API, UI text, inline help, context-sensitive help, popovers, tooltips",
"url": "doc_help_api.html",
"summary": "You can loop through files and generate a JSON file that developers can consume like a help API. Developers can pull in values from the JSON into interface elements, styling them as popovers for user interface text, for example. The beauty of this method is that the UI text remains in the help system and isn't hard-coded into the UI.",
"body": "## Full code demo of content APIYou can create a help API that developers can use to pull in content.For the full code demo, see the notes in the tooltip demo.In this demo, the popovers pull in and display content from the information in an external tooltips.json file located on a different host.Instead of tooltip popovers, you could also print content directly to the page. Basically whatever you can stuff into a JSON file, developers can integrate it onto a page.## Diagram overviewHere's a diagram showing the basic idea of the help API: Is this really an API? Well, sort of. The help content is pushed out into a JSON file that other websites and applications can easily consume. The endpoints don't deliver different data based on parameters added to a URL. But the overall concept is similar to an API: you have a client requesting resources from a server.Note that in this scenario, the help is openly accessible on the web. If you have a private system, it's more complicated.To deliver help this way using Jekyll, follow the steps in each of the sections below.## 1. Create a \"collection\" for the help content (optional)A collection is another content type that extends Jekyll beyond the use of pages and posts. Here I'm calling the collection \"tooltips.\" You could also just use pages, but if you have a lot of content, it will take longer to look up information in the file because the lookup will have to scan through all your site content instead of just the tooltips.Add the following information to your configuration file to declare your collection:```liquidcollections:  tooltips:    output: true```In your Jekyll project, create a new folder called \"_tooltips\" and put every page that you want to be part of that tooltips collection inside that folder.## 2. Create pages in your collectionCreate pages inside your new tooltips collection (that is, inside the \\_tooltips folder). Each page needs only a unique `id` in the frontmatter. Here's an example:{%raw%}```liquid---id: basketball---{{site.data.definitions.basketball}}```{%endraw%}You need to create a separate page for each resource you want to deliver. In this setup, the definition of basketball is stored in a data file call definitions inside the \\_data folder so that we can re-use it in other parts of the help as well. (This additional re-use is covered later on this page.)## 3. Create a JSON file that loops through your collection pagesAdd the following to a file and call it tooltips.json:```{% raw %}---layout: none---{	\"entries\": [    {% for page in site.tooltips %}    {      \"id\"    : \"{{ page.id }}\",      \"body\": \"{{ page.content | strip_newlines | replace: '\\', '\\\\\\\\' | replace: '\"', '\\\\\"' }}\"    } {% unless forloop.last %},{% endunless %}  {% endfor %}]}{% endraw %}```This code will loop through all pages in the tooltips collection and insert the id and body into key-value pairs for the JSON code. Here's an example of what that looks like after it's processed by Jekyll in the site build: tooltips.json.{{site.data.alerts.tip}} Check out Google's style guide for JSON. These best practices can help you keep your JSON file valid.{{site.data.alerts.end}}Store this tooltips.json file in your root directory. You can add different fields depending on how you want the JSON to be structured. Here I just have to fields: `id` and `body`. And the JSON is looking just in the tooltips collection that I created.When you build your site, Jekyll will iterate through every page in your _tooltips folder and put the page id and body into this format.You could create different JSON files that specialize in different content. For example, suppose you have some getting started information. You could put that into a different JSON file. Using the same structure, you might add an `if` tag that checks whether the page has frontmatter that says `getting_started: true` or something. Or you could put it into a separate collection entirely (different from tooltips).By chunking up your JSON files, you can provide a quicker lookup, though I'm not sure how big the JSON file can be before you experience any latency with the jQuery lookup.## 4. Allow CORS access to your help if stored on a remote serverWhen people make calls to your site *from other domains*, you must allow them access to get the content. To do this, you have to enable something called CORS (cross origin resource sharing) within the server where your help resides. In other words, people are going to be executing calls to reach into your site and grab your content. Just like the door on your house, you have to unlock it so people can get in. Enabling CORS is unlocking it. How you enable CORS depends on the type of server. If your server setup allows htaccess files to override general server permissions, then create an .htaccess file and add the following:```Header set Access-Control-Allow-Origin \"*\"```Store this in the same directory as your project. This is what I've done in a directory on my web host (bluehost.com). Inside http://idratherbetellingstories.com/wp-content/apidemos/, I uploaded a file called \".htaccess\" with the preceding code.After I uploaded it, I renamed it to .htaccess, right-clicked the file and set the permissions to 774.To test whether your server permissions are set correctly, open a terminal and run the following curl command pointing to your tooltips.json file:```curl -I http://idratherbetellingstories.com/wp-content/apidemos/tooltips.json```If the server permissions are set correctly, you should see the following line somewhere in the response:```xmlAccess-Control-Allow-Origin: *```If you don't see this response, CORS isn't allowed for the file. If you have an AWS S3 bucket, you can supposedly add a CORS configuration to the bucket permissions. Log into AWS S3 and click your bucket. On the right, in the Permissions section, click **Add CORS Configuration**. In that space, add the following policy:```xml    *   GET ```Although this should work, in my experiment it doesn't. And I'm not sure why...In other server setups, you may need to edit one of your Apache configuration files. See [Enable CORS](http://enable-cors.org/server.html) or search online for ways to allow CORS for your server.If you don't have CORS enabled, users will see a CORS error/warning message in the console of the page making the request. {{site.data.alerts.tip}} If enabling CORS is problematic, you could always just send developers the tooltips.json file and ask them to place it on their own server. {{site.data.alerts.end}}## 5. Explain how developers can access the helpDevelopers can access the help using the `.get` method from jQuery, among other methods. Here's an example of how to get a page with the ID of `basketball`:```js{% raw %}{% endraw %}```The `{url}` is where your tooltips.json file is. The `each` method looks through all the JSON content to find the item whose `page.id` is equal to `basketball`. It then looks for an element on the page named `#basketball` and adds a `data-content` attribute to that element.{{site.data.alerts.warning}}Note: Make sure your JSON file is valid. Otherwise, this method won't work. I use the JSON Formatter extension for Chrome. When I go to the tooltips.json page in my browser, the JSON content &mdash; if valid &mdash; is nicely formatted (and includes some color coding). If the file isn't valid, it's not formatted and there isn't any color. You can also check the JSON formatting using JSON Formatter and Validator. If your JSON file isn't valid, identify the problem area using the validator and troubleshoot the file causing issues. It's usually due to some code that isn't escaping correctly. {{site.data.alerts.end}}Why `data-content`? Well, in this case, I'm using [Bootstrap popovers](http://getbootstrap.com/javascript/#popovers) to display the tooltip content. The `data-content` attribute is how Bootstrap injects popovers.Here's the section on the page where the popover is inserted:```Basketball ```Notice that I just have `id=\"basketball\"` added to this popover element. Developers merely need to add a unique ID to each tooltip they want to pull in the help content. Either you tell developers the unique ID they should add, or ask them what IDs they added (or just tell them to use an ID that matches the field's name).In order to use jQuery and Bootstrap, you'll need to add the appropriate references in the head tags of your page: ```js$(document).ready(function(){    $('[data-toggle=\"popover\"]').popover({        placement : 'right',        trigger: 'hover',        html: true    });```Note that even though you reference a Bootstrap js script, Bootstrap's popovers require you to initialize them using the above code as well &mdash; they aren't turned on by default.View the source code of the Tooltip Demo for the full comments. ## 6. Create easy links to embed the help in your help siteYou might also want to insert the same content into different parts of your help site. For example, if you have tooltips providing definitions for fields, you'll probably want to create a page in your help that lists those same definitions. You could use the same method developers use to pull help content into their applications. But it will probably be easier to simply use Jekyll's tags for doing it. Here's how you would reuse the content:```html{% raw %}Reuse DemoSportCommentsBasketball{{site.data.definitions.basketball}}Baseball{{site.data.definitions.baseball}}Football{{site.data.definitions.football}}Soccer{{site.data.definitions.soccer}}{% endraw %}```And here's the code: Reuse DemoSportCommentsBasketball{{site.data.definitions.basketball}}Baseball{{site.data.definitions.baseball}}Football{{site.data.definitions.football}}Soccer{{site.data.definitions.soccer}}"
},




{
"title": "Glossary layout",
"tags": "formattingspecial-layouts",
"keywords": "definitions, glossaries, terms, style guide",
"url": "doc_glossary.html",
"summary": "Your glossary page can take advantage of definitions stored in a data file. This gives you the ability to reuse the same definition in multiple places. Additionally, you can use Bootstrap classes to arrange your definition list horizontally.",
"body": "You can create a glossary for your content. First create your glossary items in a data file such as glossary.yml. Then create a page and use definition list formatting, like this:```htmlfractious{{site.data.glossary.fractious}}gratuitous{{site.data.glossary.gratuitous}}haughty{{site.data.glossary.haughty}}gratuitous{{site.data.glossary.gratuitous}}impertinent{{site.data.glossary.impertinent}}intrepid{{site.data.glossary.intrepid}}```Here's what that looks like: fractious{{site.data.glossary.fractious}}gratuitous{{site.data.glossary.gratuitous}}haughty{{site.data.glossary.haughty}}gratuitous{{site.data.glossary.gratuitous}}impertinent{{site.data.glossary.impertinent}}intrepid{{site.data.glossary.intrepid}}The glossary works well as a link in the top navigation bar.## Horizontally styled definiton listsYou can also change the definition list (`dl`) class to `dl-horizontal`. This is a Bootstrap specific class. If you do, the styling looks like this:fractious{{site.data.glossary.fractious}}gratuitous{{site.data.glossary.gratuitous}}haughty{{site.data.glossary.haughty}}gratuitous{{site.data.glossary.gratuitous}}impertinent{{site.data.glossary.impertinent}}intrepid{{site.data.glossary.intrepid}}If you squish your screen small enough, at a certain breakpoint this style reverts to the regular `dl` class. Although I like the side-by-side view for shorter definitions, I found it problematic with longer definitions."
},




{
"title": "Navtabs",
"tags": "formatting",
"keywords": "navigation tabs, hide sections, tabbers, interface tabs",
"url": "doc_navtabs.html",
"summary": "Navtabs provide a tab-based navagation directly in your content, allowing users to click from tab to tab to see different panels of content. Navtabs are especially helpful for showing code samples for different programming languages. The only downside to using navtabs is that you must use HTML instead of Markdown.",
"body": "## Common usesNavtabs are particularly useful for scenarios where you want to show a variety of options, such as code samples for Java, .NET, or PHP, on the same page. While you could resort to single-source publishing to provide different outputs for each unique programming language or role, you could also use navtabs to allow users to select the content you want.Navtabs are better for SEO since you avoid duplicate content and drive users to the same page.## Navtabs demoThe following is a demo of a navtab. Refresh your page to see the tab you selected remain active.     Profile    About    Match       Profile Praesent sit amet fermentum leo. Aliquam feugiat, nibh in u ltrices mattis, felis ipsum venenatis metus, vel vehicula libero mauris a enim. Sed placerat est ac lectus vestibulum tempor. Quisque ut condimentum massa. Proin venenatis leo id urna cursus blandit. Vivamus sit amet hendrerit metus.    About    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aliquam vel sollicitudin felis. Sed eu arcu sed ipsum semper luctus eu a tortor. Suspendisse id leo eu metus laoreet varius. Mauris consequat accumsan ex, a iaculis metus fermentum a. Praesent sit amet fermentum leo. Aliquam feugiat, nibh in u ltrices mattis, felis ipsum venenatis metus, vel vehicula libero mauris a enim. Sed placerat est ac lectus vestibulum tempor. Quisque ut condimentum massa. Proin venenatis leo id urna cursus blandit. Vivamus sit amet hendrerit metus.about    Match    Vel vehicula libero mauris a enim. Sed placerat est ac lectus vestibulum tempor. Quisque ut condimentum massa. Proin venenatis leo id urna cursus blandit. Vivamus sit amet hendrerit metus.## CodeHere's the code for the above (with the filler text abbreviated):```html    Profile    About    Match       Profile Praesent sit amet fermentum leo....    About    Lorem ipsum ...    Match    Vel vehicula ....```## Design constraintsBootstrap automatically clears any floats after the navtab. Make sure you aren't trying to float any element to the right of your navtabs, or there will be some awkward space in your layout.## Appearance in the mini-TOCIf you put a heading in the navtab content, that heading will appear in the mini-TOC as long as the heading tag has an ID. If you don't want the headings for each navtab section to appear in the mini-TOC, omit the ID attribute from the heading tag. Without this ID attribute in the heading, the mini-TOC won't insert the heading title into the mini-TOC.## Must use HTMLYou must use HTML within the navtab content because each navtab section is surrounded with HTML, and you can't use Markdown inside of HTML.## Match up ID tagsEach tab's `href` attribute must match the `id` attribute of the tab content's `div` section. So if your tab has `href=\"#acme\"`, then you add `acme` as the ID attribute in ``.## Set an active tabOne of the tabs needs to be set as active, depending on what tab you want to be open by default (usually the first one).```html```## Sets a cookieThe navtabs are part of Bootstrap, but this theme sets a cookie to remember the last tab's state. The js/customscripts.js file has a long chunk of JavaScript that sets the cookie. The JavaScript comes from [this StackOverflow thread](http://stackoverflow.com/questions/10523433/how-do-i-keep-the-current-tab-active-with-twitter-bootstrap-after-a-page-reload). By setting a cookie, if the user refreshes the page, the active tab is the tab the user last selected (rather than defaulting to the default active tab).## Functionality to implementOne piece of functionality I'd like to implement is the ability to set site-wide nav tab options. For example, if the user always chooses PHP instead of Java in the code samples, it would be great to set this option site-wide by default. However, this functionality isn't yet coded."
},
















{
"title": "Labels",
"tags": "formatting",
"keywords": "labels, buttons, bootstrap, api methods",
"url": "doc_labels.html",
"summary": "Labels are just a simple Bootstrap component that you can include in your pages as needed. They represent one of many Bootstrap options you can include in your theme.",
"body": "## About labelsLabels might come in handy for adding button-like tags next to elements, such as POST, DELETE, UPDATE methods for endpoints. You can use any classes from Bootstrap in your content.```htmlDefaultPrimarySuccessInfoWarningDanger```DefaultPrimarySuccessInfoWarningDangerYou can have a label appear within a heading simply by including the span tag in the heading. However, you can't mix Markdown syntax with HTML, so you'd have to hard-code the heading ID for the auto-TOC to work. "
},




{
"title": "Sidebar navigation",
"tags": "navigation",
"keywords": "sidebar, toc, table of contents, navigation",
"url": "doc_sidebar_navigation.html",
"summary": "The sidebar and top navigation bar read their values from yml files. The navigation components are one of the most unique parts of this theme, since the navigation components are only included if they meet all of the product, audience, version, etc., values as specified in the project settings.",
"body": "## Sidebar overviewTo configure the sidebar, edit the values in the \\_data/sidebar_doc.yml file. Follow the example  in this theme. Note that YML spacing is picky. Each new level is two spaces indented. I usually just keep a template that shows all three levels and then copy and paste from it as needed.## Sidebar levelsYou can add three levels of nesting in the sidebar nav. For example, three levels looks like this:```Introduction -> Getting started -> Features -> Configuration 	-> Options	-> Automation```You can't add more than three levels. In general, it's a best practice not to create more than three levels of navigation anyway, since it creates a paralysis of choice for the user.If you need deeper sublevels, I recommend creating different sidebars for different pages, which is logic that I haven't coded into the theme but which could probably be added fairly easily.## External linksIf you want the URL to point to an external site, use `external_url` instead of `url` in the data file. Then just enter the full HTTP URL. When you use `external_url`, the sidebar.html will apply this logic:```html{% raw %}{% if item.external_url %}{{subcategory.title}}{% endraw %}```             {% if site.audience == \"designers\" %}## How it worksThe values in the sidebar_doc.yml file are coded to match the logic in includes/sidebar.html. Each of the items in the sidebar needs to have the attributes shown here:```yaml- title: Getting started  url: /doc_getting_started.html  audience: writers, designers  platform: all  product: all  version: all```The project, audience, platform, product, and version are specified in the includes/custom/conditions.html file:```liquid{% raw %}{% if site.project == \"doc_designers\" %}{% assign audience = \"designers\" %}{% assign sidebar = site.data.sidebar.entries %}{% assign topnav = site.data.topnav.topnav %}{% assign topnav_dropdowns = site.data.topnav.topnav_dropdowns %}{% assign version = \"all\" %}{% assign product = \"all\" %}{% assign platform = \"all\" %}{% assign projectTags = site.data.tags_doc.allowed-tags %}{% endif %}{% endraw %}```Additionally, note how some assignments are set here as well. The conditions.html file set things like `sidebar = site.data.sidebar.entries`. You could use this logic to extend the single sourcing possibilities of the theme.When the sidebar.html file runs the logic, it includes these statements: ```liquid{% raw %}{% include custom/conditions.html %}{% for entry in sidebar %}...{% endraw %}```The assignment of the `sidebar` value through the conditions.html file means this is really what's happening:```liquid{% raw %}{% include custom/conditions.html %}{% for entry in site.data.sidebar.entries %}{% endraw %}```Since different projects might use different data files, I had to made the logic run using the standard `sidebar` variable but change the meaning of that variable based on the project.## Sidebar accordionIf you don't want the accordion feature in the sidebar, open the \\_includes/sidebar.html file and change the value for `accordion` in the `.navgoco` options from `true` to `false` (don't surround the value with quotes).This will make it so users can expand more than one sidebar section at once without the other sections collapsing.Additionally, to show \"Collapse All\" and \"Expand All\" buttons, uncomment this section near bottom on the same sidebar.html page:```   ```Note that if you Expand all sections in your sidebar and you have a lot of items, the sidebar will likely extend past the viewing frame. In this case, you should disable the fixed sidebar setting by removing the JavaScript code explained in the next section (\"Sidebar fixed or moving\").## Sidebar fixed or movingIf you scroll up, the sidebar usually remains fixed in place. This is so that users can keep the context of the table of contents in place while they move down the page.However, if the user's viewport is really small, you don't want the TOC to remain fixed in place because expanding one section may extend past what is visible. In the js/customscripts.js file, I inserted some logic to check the viewport size. ```js$( document ).ready(function() {    //    var h = $(window).height();    console.log (h);    if (h > 800) {        $( \"#mysidebar\" ).attr(\"class\", \"nav affix\");    }    // activate tooltips. although this is a bootstrap js function, it must be activated this way in your theme.    $('[data-toggle=\"tooltip\"]').tooltip({        placement : 'top'    });});```The script says, if the height of the viewport is greater than 800px, then insert `affix` class, which makes the nav bar fixed as your scroll. If you have a lot of nav items, this fixed position may not work for you.For example, if your sidebar has a lot of items and the fixed position makes it so the user can't see all the items when expanded, you may want to adjust the height. If viewing the sidebar is ap roblem, increase the height value from `800` to `1000` or more.## Navgoco foundationThe sidebar uses the [Navgoco jQuery plugin](https://github.com/tefra/navgoco) as its basis. Why not use Bootstrap? Navgoco provides a few features that I couldn't find in Bootstrap:* Navgoco sets a cookie to remember the user's position in the sidebar. If you refresh the page, the cookie allows the plugin to remember the state.* Navgoco inserts an `active` class based on the navigation option that's open. This is essential for keeping the accordion open.* Navgoco includes the expand and collapse features of a sidebar.In short, the sidebar has some complex logic here. I've integrated Navgoco's features with the sidebar.html and sidebar_doc.yml to build the sidebar. It's probably the most impressive part of this theme. (Other themes usually aren't focused on creating hierarchies of pages, but this kind of hierarchy is important in a documentation site.)## Highlighting the active itemHere's how the highlighting of the currently viewed page works. In the sidebar.html file, you'll see this:```liquid{% raw %} {% elsif page.url == item.url %}   {{item.title}}{% endraw %}```                   The `page.url` is a universal Jekyll tag that returns the end path of the page, prepended with `/`. For example, `/sample.html`. If this `page.url` matches the `item.url` specified in the sidebar_doc.yml file, then an `active` class gets applied.Note that I've added a filter to the item.url in the sidebar.html file: ```liquid{% raw %}{{item.url | replace: \"/\",\"\"}}{% endraw %}```Ideally, in the sidebar_doc.yml file, you could just write the URL you want to go to: `sample.html` instead of `/sample.html`. However, page.url always returns the forward slash before the URL. In order to match the page.url with the item.url, you have to use the forward slash before item.url in the doc_sidebar.yml file. However, if you set up your relative link as `/sample.html` instead of `sample.html`, then the browser will go to the directory root instead of any baseurl.For example, if your site is deployed at http://mydomain.com/doc/, then going to `/sample.html` in the link will take you to `http://mydomain.com/sample.html` instead of `http://mydomain.com/doc/sample.html`.In contrast, going to `sample.html` in the link will take you to `http://mydomain.com/doc/sample.html`. Hence the filter to remove the forward slash in the link.That logic handles the highlighting of the active item, but in order for the sidebar to remain open, the parent level needs to also have the `active` class. To accomplish this, I inserted this script below the sidebar code in the sidebar.html file:```js```This script has to come *after* the sidebar code. Otherwise, if placed inside customscripts.js, the script runs before the sidebar code runs and the class never gets inserted.{% endif %}"
},




{
"title": "Tables",
"tags": "formatting",
"keywords": "datatables, tables, grids, markdown, multimarkdown, jquery plugins",
"url": "doc_tables.html",
"summary": "You can format tables using either multimarkdown syntax or HTML. You can also use jQuery datatables (a plugin) if you need more robust tables.",
"body": "{% unless site.print == true %}{% endunless %}## Multimarkdown TablesYou can use Multimarkdown syntax for tables. The following shows a sample: ```Column 1 | Column 2--------|----------cell 1a | cell 1bcell 2a | cell 2b```This renders to the following: Column 1 | Column 2--------|----------cell 1a | cell 1bcell 2a | cell 2b## jQuery datablesYou also have the option of using a [jQuery datatable](https://www.datatables.net/), which gives you some more options. If you want to use a jQuery datatable, then add `datatable: true` in a page's frontmatter. This will load the right jQuery datatable scripts for the table on that page only (rather than loading the scripts on every page of the site.)Also, you need to add this script to trigger the jQuery table on your page:```js```The available options for the datable are described in the [datatable documentation](https://www.datatables.net/manual/options), which is excellent.Additionally, you must add a class of `display` to your tables. (You can change the class, but then you'll need to change the trigger above from `table.display` to whatever class you want to you. You might have different triggers with different options for different tables.)Since Markdown doesn't allow you to add classes to tables, you'll need to use HTML for any datatables. Here's an example: ```html                  Parameter         Description         Type         Default Value                           Parameter 1         Sample description                  Sample type         Sample default value                     Parameter 2         Sample description                  Sample type         Sample default value                 Parameter 3       Sample description              Sample type       Sample default value                   Parameter 4         Sample description                  Sample type         Sample default value         ```This renders to the following:                  Food         Description         Category         Sample type                           Apples         A small, somewhat round and often red-colored, crispy fruit grown on trees.                   Fruit         Fuji                     Bananas         A long and curved, often-yellow, sweet and soft fruit that grows in bunches in tropical climates.                  Fruit         Snow                     Kiwis         A small, hairy-skinned sweet fruit with green-colored insides and seeds.                  Fruit         Golden                         Oranges           A spherical, orange-colored sweet fruit commonly grown in Florida and California.                      Fruit           Navel           Notice a few features:* You can keyword search the table. When you type a word, the table filters to match your word.* You can sort the column order.* You can page the results so that you show only a certain number of values on the first page and then require users to click next to see more entries.Read more of the [datatable documentation](https://www.datatables.net/manual/options) to get a sense of the options you can configure. You should probably only use datatables when you have long, massive tables full of information.{{site.data.alerts.note}} Try to keep the columns to 3 or 4 columns only. If you add 5+ columns, your table may create horizontal scrolling with the theme.{{site.data.alerts.end}}"
},




{
"title": "Pages",
"tags": "getting-startedformattingcontent-types",
"keywords": "pages, authoring, exclusion, frontmatter",
"url": "doc_pages.html",
"summary": "This theme uses pages only, not posts. You need to make sure your pages have the appropriate frontmatter. One frontmatter tag your users might find helpful is the summary tag. This functions similar in purpose to the shortdesc element in DITA.",
"body": "## Where to author contentUse a text editor such as Sublime Text, WebStorm, IntelliJ, or Atom to create pages. My preference is IntelliJ/WebStorm, since it will treat all files in your project as belonging to a project. This allows you to easily search for instances of keywords, do find-and-replace operations, or do other actions that apply across the whole project.## Page names and excluding files from outputsBy default, everything in your project is included in the output. This is problematic when you're single sourcing and need to exclude some files from an output. Here's the approach I've taken. Put all files in your root directory, but put the project name first and then any special conditions. For example, doc_writers_intro.md. In your configuration file, you can exclude all files that don't belong to that project by using wildcards such as the following:exclude: - doc_*- doc_writers_*These wildcards will exclude every match after the `*`.## FrontmatterMake sure each page has frontmatter at the top like this:```{% raw %}---title: Your page titletags: [formatting, getting-started]keywords: overview, going live, high-levellast_updated: August 12, 2015summary: \"Deploying DeviceInsight requires the following steps.\"{% endraw %}---```Frontmatter is always formatted with three hyphens at the top and bottom. Your frontmatter must have a `title` value. All the other values are optional.The following table describes each of the frontmatter that you can use with this theme:| Frontmatter | Required? | Description ||-------------|-------------|-------------|| **title** | Required | The title for the page || **tags** | Optional | Tags for the page. Make all tags single words, with hyphens if needed. Separate them with commas. Enclose the whole list within brackets. Also, note that tags must be added to \\_data/tags_doc.yml to be allowed entrance into the page.   || **keywords** | Optional | Synonyms and other keywords for the page. This information gets stuffed into the page's metadata to increase SEO. The user won't see the keywords, but if you search for one of the keywords, it will be picked up by the search engine.  || **last_updated**  | Optional | The date the page was last updated. This information could helpful for readers trying to evaluate how current and authoritative information is. If included, the last_updated date appears in the footer of the page.|| **summary** | Optional | A 1-2 word sentence summarizing the content on the page. This gets formatted into the summary section in the page layout. Adding summaries is a key way to make your content more scannable by users (check out [Jakob Nielsen's site](http://www.nngroup.com/articles/corporate-blogs-front-page-structure/) for a great example of page summaries.)  || **datatable** | Optional | Boolean. If you add `true`, then scripts for the [jQuery datatables plugin](https://www.datatables.net/) get included on the page. || **video** | Optional | If you add `true`, then scripts for [Video JS: The HTML5 video player](http://www.videojs.com/) get included on the page. |{{site.data.alerts.tip}} You can see the scripts that conditionally appear by looking in the _layouts/default.html page. Note that these scripts are served via a CDN, so the user must be online for the scripts to work. However, if the user isn't online, the tables and video still appear. In other words, they degrade gracefully. {{site.data.alerts.end}}## What about permalinks? What about permalinks? This theme isn't build using permalinks because it makes linking and directory structures problematic. Permalinks generate an index file inside a folder for each file in the output. This makes it so links (to other pages as well as to resources such as styles and scripts) need to include `../` depending upon where the other assets are located. But for any pages outside folders, such as the index.html page, you wouldn't use the `../` structure.Basically, permalinks complicate the linking structure significantly, so they aren't used here. As a result, page URLs have an .html extension. If you include `permalink: something` in your frontmatter, your link to the page will break (actually, you could still go to sample instead of sample.html, but none of the styles or scripts will be correctly referenced).## Colons in page titles If you want to use a colon in your page title, you must enclose the title's value in quotation marks.## Saving pages as draftsIf you add `published: false` in the frontmatter, your page won't be published. You can also move draft pages into the _drafts folder to exclude them from the build.{{site.data.alerts.tip}} You can create file templates in WebStorm that have all your common frontmatter, such as all possible tags, prepopulated. See {{site.data.urls.doc_webstorm_text_editor.link}} for details. {{site.data.alerts.end}}## Markdown or HTML formatPages can be either Markdown or HTML format (specified through either an .md or .html file extension). If you use Markdown, you can also include HTML formatting where needed. But not vice versa &mdash; if you use HTML (as your file extension), you can't insert Markdown content.Also, if you use HTML inside a Markdown file, you cannot use Markdown inside of HTML. But you can use HTML inside of Markdown.For your Markdown files, note that a space or two indent will set text off as code or blocks, so avoid spacing indents unless intentional.## Where to save pagesStore all your pages inside the root directory. This is because the site is built with relative links. There aren't any permalinks or baseurls used in the link architecture. This relative link nature of the site allows you to easily move it from one folder to another without invalidating the links.If this approach creates too many files in one long list, consider grouping files into Favorites sections using WebStorms Add to Favorites feature.## Github-flavored MarkdownYou can use standard Multimarkdown syntax for tables. You can also use fenced code blocks. The configuration file shows the Markdown processor and extensiosn:```markdown: redcarpetredcarpet:  extensions: [\"no_intra_emphasis\", \"fenced_code_blocks\", \"tables\", \"with_toc_data\"]```These extensions mean the following:| Redcarpet extension | Description || --------------|---------------|| no_intra_emphasis   |  don't italicize words with underscores  || fenced_code_blocks  | allow three backticks before and after code blocks instead of `` tags   || tables  | allow table syntax    || with_toc\\_data  | add ID tags to headings automatically   |You can also add \"autolink\" as an option if you want links such as http://google.com to automatically be converted into links. {{site.data.alerts.note}} Make sure you leave the with_toc_data option included. This auto-creates an ID for each Markdown-formatted heading, which then gets injected into the mini-TOC. Without this auto-creation of IDs, the mini-TOC won't include the heading. If you ever use HTML formatting for headings, you need to manually add an ID attribute to the heading in order for the heading to appear in the mini-TOC. {{site.data.alerts.end}}## Automatic mini-TOCsBy default, a mini-TOC appears at the top of your pages and posts. If you don't want this, you can remove the {% raw %}`{% include toc.html %}` {% endraw %} from the layouts/page.html file.If you don't want the TOC to appear for a specific page, add `toc: false` in the frontmatter of the page.The mini-TOC requires you to use the `##` syntax for headings. If you use `` elements, then you must add an ID attribute for the h2 element in order for it to appear in the mini-TOC.## Specify a particular page layoutThe configuration file sets the default layout for pages as the \"page\" layout.You can create other layouts inside the layouts folder. If you create a new layout, you can specify that your page use your new layout by adding `layout: mylayout.html` in the page's frontmatter. Whatever layout you specify in the frontmatter of a page will override the layout default set in the configuration file.## CommentsDisqus, a commenting system, is integrated into the theme. In the configuration file, specify the Disqus code for the universal code, and Disqus will appear. If you don't add a Disqus value, the Disqus code isn't included.## PostsThis theme isn't coded with any kind of posts logic. For example, if you wanted to add a blog to your project that leverages posts, you couldn't do this with the theme. However, you could easily take the post logic from another site and integrate it into this theme. I've just never had a strong need to integrate blog posts into documentation.## Custom keyboard shortcutsSome of the Jekyll syntax can be slow to create. Using a utility such as [aText](https://www.trankynam.com/atext/) can make creating content a lot of faster.For example, when I type `jif`, aText replaces it with `{% raw %}{% if site.platform == \"x\" %}{% endraw %}`. When I type `jendif`, aText replaces it with `{% raw %}{% endif %}{% endraw %}`.You get aText from the App Store on a Mac for about $5.There are alternatives to aText, such as Typeitforme. But aText seems to work the best. You can read more about it on [Lifehacker](http://lifehacker.com/5843903/the-best-text-expansion-app-for-mac)."
},



null
]


